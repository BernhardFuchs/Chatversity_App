/// <reference path="../disposables/disposable.ts" />
/// <reference path="./scheduler.ts" />
/// <reference path="./scheduleditem.ts" />
(function () {
    var vts;
    var b = vts.isEnabled;
    var a = vts.add(100, 500);
    var n = vts.toAbsoluteTime(1000);
    var r = vts.toRelativeTime(1000);
    var d = vts.start();
    vts.stop();
    vts.advanceTo(null);
    vts.advanceBy(null);
    vts.sleep(null);
    var i = vts.getNext();
    b = vts.isEnabled;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbHRpbWVzY2hlZHVsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wbGF0Zm9ybXMvaW9zL0NoYXR2ZXJzaXR5QXBwL2FwcC90bnNfbW9kdWxlcy9yeC90cy9jb3JlL2NvbmN1cnJlbmN5L3ZpcnR1YWx0aW1lc2NoZWR1bGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUNyRCx1Q0FBdUM7QUFDdkMsMkNBQTJDO0FBK0QzQyxDQUFDO0lBR0csSUFBSSxHQUFvQyxDQUFDO0lBRXpDLElBQUksQ0FBQyxHQUFZLEdBQUcsQ0FBQyxTQUFTLENBQUM7SUFDL0IsSUFBSSxDQUFDLEdBQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDLEdBQVcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUMsR0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxHQUFtQixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ1gsR0FBRyxDQUFDLFNBQVMsQ0FBSyxJQUFJLENBQUMsQ0FBQztJQUN4QixHQUFHLENBQUMsU0FBUyxDQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUssSUFBSSxDQUFDLENBQUM7SUFDcEIsSUFBSSxDQUFDLEdBQW1DLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN0RCxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kaXNwb3NhYmxlcy9kaXNwb3NhYmxlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3NjaGVkdWxlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9zY2hlZHVsZWRpdGVtLnRzXCIgLz5cbm1vZHVsZSBSeCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBWaXJ0dWFsVGltZVNjaGVkdWxlcjxUQWJzb2x1dGUsIFRSZWxhdGl2ZT4gZXh0ZW5kcyBJU2NoZWR1bGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYSByZWxhdGl2ZSB0aW1lIHZhbHVlIHRvIGFuIGFic29sdXRlIHRpbWUgdmFsdWUuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhYnNvbHV0ZSBBYnNvbHV0ZSB2aXJ0dWFsIHRpbWUgdmFsdWUuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSByZWxhdGl2ZSBSZWxhdGl2ZSB2aXJ0dWFsIHRpbWUgdmFsdWUgdG8gYWRkLlxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJlc3VsdGluZyBhYnNvbHV0ZSB2aXJ0dWFsIHRpbWUgc3VtIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkKGZyb206IFRBYnNvbHV0ZSwgYnk6IFRSZWxhdGl2ZSk6IFRBYnNvbHV0ZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgYW4gYWJzb2x1dGUgdGltZSB0byBhIG51bWJlclxuICAgICAgICAgKiBAcGFyYW0ge0FueX0gVGhlIGFic29sdXRlIHRpbWUuXG4gICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhYnNvbHV0ZSB0aW1lIGluIG1zXG4gICAgICAgICAqL1xuICAgICAgICB0b0Fic29sdXRlVGltZShkdWV0aW1lOiBUQWJzb2x1dGUpOiBudW1iZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoZSBUaW1lU3BhbiB2YWx1ZSB0byBhIHJlbGF0aXZlIHZpcnR1YWwgdGltZSB2YWx1ZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVTcGFuIFRpbWVTcGFuIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICAgICAqIEByZXR1cm4ge051bWJlcn0gQ29ycmVzcG9uZGluZyByZWxhdGl2ZSB2aXJ0dWFsIHRpbWUgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICB0b1JlbGF0aXZlVGltZShkdWV0aW1lOiBudW1iZXIpOiBUUmVsYXRpdmU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXJ0cyB0aGUgdmlydHVhbCB0aW1lIHNjaGVkdWxlci5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXJ0KCk6IElEaXNwb3NhYmxlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9wcyB0aGUgdmlydHVhbCB0aW1lIHNjaGVkdWxlci5cbiAgICAgICAgICovXG4gICAgICAgIHN0b3AoKTogdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWR2YW5jZXMgdGhlIHNjaGVkdWxlcidzIGNsb2NrIHRvIHRoZSBzcGVjaWZpZWQgdGltZSwgcnVubmluZyBhbGwgd29yayB0aWxsIHRoYXQgcG9pbnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lIEFic29sdXRlIHRpbWUgdG8gYWR2YW5jZSB0aGUgc2NoZWR1bGVyJ3MgY2xvY2sgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBhZHZhbmNlVG8odGltZTogVEFic29sdXRlKTogdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWR2YW5jZXMgdGhlIHNjaGVkdWxlcidzIGNsb2NrIGJ5IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgdGltZSwgcnVubmluZyBhbGwgd29yayBzY2hlZHVsZWQgZm9yIHRoYXQgdGltZXNwYW4uXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lIFJlbGF0aXZlIHRpbWUgdG8gYWR2YW5jZSB0aGUgc2NoZWR1bGVyJ3MgY2xvY2sgYnkuXG4gICAgICAgICAqL1xuICAgICAgICBhZHZhbmNlQnkodGltZTogVFJlbGF0aXZlKTogdm9pZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWR2YW5jZXMgdGhlIHNjaGVkdWxlcidzIGNsb2NrIGJ5IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgdGltZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgUmVsYXRpdmUgdGltZSB0byBhZHZhbmNlIHRoZSBzY2hlZHVsZXIncyBjbG9jayBieS5cbiAgICAgICAgICovXG4gICAgICAgIHNsZWVwKHRpbWU6IFRSZWxhdGl2ZSk6IHZvaWQ7XG5cbiAgICAgICAgaXNFbmFibGVkOiBib29sZWFuO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBuZXh0IHNjaGVkdWxlZCBpdGVtIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7U2NoZWR1bGVkSXRlbX0gVGhlIG5leHQgc2NoZWR1bGVkIGl0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICBnZXROZXh0KCk6IGludGVybmFscy5TY2hlZHVsZWRJdGVtPFRBYnNvbHV0ZT47XG4gICAgfVxufVxuXG4oZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJmYWNlIFRBIHsgfVxuICAgIGludGVyZmFjZSBUUiB7IH1cbiAgICB2YXIgdnRzOiBSeC5WaXJ0dWFsVGltZVNjaGVkdWxlcjxUQSwgVFI+O1xuXG4gICAgdmFyIGI6IGJvb2xlYW4gPSB2dHMuaXNFbmFibGVkO1xuICAgIHZhciBhOiBUQSA9IHZ0cy5hZGQoMTAwLCA1MDApO1xuICAgIHZhciBuOiBudW1iZXIgPSB2dHMudG9BYnNvbHV0ZVRpbWUoMTAwMCk7XG4gICAgdmFyIHI6IFRSID0gdnRzLnRvUmVsYXRpdmVUaW1lKDEwMDApO1xuICAgIHZhciBkOiBSeC5JRGlzcG9zYWJsZSA9IHZ0cy5zdGFydCgpO1xuICAgIHZ0cy5zdG9wKCk7XG4gICAgdnRzLmFkdmFuY2VUbyg8VEE+bnVsbCk7XG4gICAgdnRzLmFkdmFuY2VCeSg8VFI+bnVsbCk7XG4gICAgdnRzLnNsZWVwKDxUUj5udWxsKTtcbiAgICB2YXIgaTogUnguaW50ZXJuYWxzLlNjaGVkdWxlZEl0ZW08VEE+ID0gdnRzLmdldE5leHQoKTtcbiAgICBiID0gdnRzLmlzRW5hYmxlZDtcbn0pXG4iXX0=