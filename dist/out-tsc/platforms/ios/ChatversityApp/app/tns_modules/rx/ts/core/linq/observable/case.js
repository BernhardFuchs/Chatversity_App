/// <reference path="../../observable.ts" />
/// <reference path="../../concurrency/scheduler.ts" />
(function () {
    var o;
    var p;
    var e;
    var on;
    var pn;
    var en;
    var so = {};
    so['abc'] = p;
    so['def'] = e;
    so['xyz'] = o;
    var no = {};
    no[1] = pn;
    no[2] = en;
    no[3] = on;
    o = Rx.Observable.case(function () { return 'abc'; }, so);
    o = Rx.Observable.case(function () { return 'abc'; }, so, e);
    o = Rx.Observable.case(function () { return 'abc'; }, so, Rx.Scheduler.async);
    on = Rx.Observable.case(function () { return 1; }, no);
    on = Rx.Observable.case(function () { return 2; }, no, en);
    on = Rx.Observable.case(function () { return 3; }, no, Rx.Scheduler.async);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvQ2hhdHZlcnNpdHlBcHAvYXBwL3Ruc19tb2R1bGVzL3J4L3RzL2NvcmUvbGlucS9vYnNlcnZhYmxlL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNENBQTRDO0FBQzVDLHVEQUF1RDtBQXdCdkQsQ0FBQztJQUNHLElBQUksQ0FBd0IsQ0FBQztJQUM3QixJQUFJLENBQXFCLENBQUM7SUFDMUIsSUFBSSxDQUF3QixDQUFDO0lBQzdCLElBQUksRUFBeUIsQ0FBQztJQUM5QixJQUFJLEVBQXNCLENBQUM7SUFDM0IsSUFBSSxFQUF5QixDQUFDO0lBRTlCLElBQUksRUFBRSxHQUF3RCxFQUFFLENBQUM7SUFDakUsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNkLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWQsSUFBSSxFQUFFLEdBQXdELEVBQUUsQ0FBQTtJQUNoRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ1gsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNYLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFWCxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLEtBQUssRUFBTCxDQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdkMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMxQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLEtBQUssRUFBTCxDQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxDQUFDLEVBQUQsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3BDLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxDQUFDLEVBQUQsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL29ic2VydmFibGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2NvbmN1cnJlbmN5L3NjaGVkdWxlci50c1wiIC8+XG5tb2R1bGUgUngge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZVN0YXRpYyB7XG4gICAgICAgIC8qKlxuICAgICAgICAqICBVc2VzIHNlbGVjdG9yIHRvIGRldGVybWluZSB3aGljaCBzb3VyY2UgaW4gc291cmNlcyB0byB1c2UuXG4gICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgVGhlIGZ1bmN0aW9uIHdoaWNoIGV4dHJhY3RzIHRoZSB2YWx1ZSBmb3IgdG8gdGVzdCBpbiBhIGNhc2Ugc3RhdGVtZW50LlxuICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZXMgQSBvYmplY3Qgd2hpY2ggaGFzIGtleXMgd2hpY2ggY29ycmVzcG9uZCB0byB0aGUgY2FzZSBzdGF0ZW1lbnQgbGFiZWxzLlxuICAgICAgICAqIEBwYXJhbSB7T2JzZXJ2YWJsZX0gW2Vsc2VTb3VyY2VdIFRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlIG9yIFByb21pc2UgdGhhdCB3aWxsIGJlIHJ1biBpZiB0aGUgc291cmNlcyBhcmUgbm90IG1hdGNoZWQuIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkLCBpdCBkZWZhdWx0cyB0byBSeC5PYnNlcnZhYmUuZW1wdHkgd2l0aCB0aGUgc3BlY2lmaWVkIHNjaGVkdWxlci5cbiAgICAgICAgKlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIHdoaWNoIGlzIGRldGVybWluZWQgYnkgYSBjYXNlIHN0YXRlbWVudC5cbiAgICAgICAgKi9cbiAgICAgICAgY2FzZTxUPihzZWxlY3RvcjogKCkgPT4gc3RyaW5nLCBzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IE9ic2VydmFibGVPclByb21pc2U8VD47IH0sIHNjaGVkdWxlck9yRWxzZVNvdXJjZT86IElTY2hlZHVsZXIgfCBPYnNlcnZhYmxlT3JQcm9taXNlPFQ+KTogT2JzZXJ2YWJsZTxUPjtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFVzZXMgc2VsZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNvdXJjZSBpbiBzb3VyY2VzIHRvIHVzZS5cbiAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciBUaGUgZnVuY3Rpb24gd2hpY2ggZXh0cmFjdHMgdGhlIHZhbHVlIGZvciB0byB0ZXN0IGluIGEgY2FzZSBzdGF0ZW1lbnQuXG4gICAgICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlcyBBIG9iamVjdCB3aGljaCBoYXMga2V5cyB3aGljaCBjb3JyZXNwb25kIHRvIHRoZSBjYXNlIHN0YXRlbWVudCBsYWJlbHMuXG4gICAgICAgICogQHBhcmFtIHtPYnNlcnZhYmxlfSBbZWxzZVNvdXJjZV0gVGhlIG9ic2VydmFibGUgc2VxdWVuY2Ugb3IgUHJvbWlzZSB0aGF0IHdpbGwgYmUgcnVuIGlmIHRoZSBzb3VyY2VzIGFyZSBub3QgbWF0Y2hlZC4gSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQsIGl0IGRlZmF1bHRzIHRvIFJ4Lk9ic2VydmFiZS5lbXB0eSB3aXRoIHRoZSBzcGVjaWZpZWQgc2NoZWR1bGVyLlxuICAgICAgICAqXG4gICAgICAgICogQHJldHVybnMge09ic2VydmFibGV9IEFuIG9ic2VydmFibGUgc2VxdWVuY2Ugd2hpY2ggaXMgZGV0ZXJtaW5lZCBieSBhIGNhc2Ugc3RhdGVtZW50LlxuICAgICAgICAqL1xuICAgICAgICBjYXNlPFQ+KHNlbGVjdG9yOiAoKSA9PiBudW1iZXIsIHNvdXJjZXM6IHsgW2tleTogbnVtYmVyXTogT2JzZXJ2YWJsZU9yUHJvbWlzZTxUPjsgfSwgc2NoZWR1bGVyT3JFbHNlU291cmNlPzogSVNjaGVkdWxlciB8IE9ic2VydmFibGVPclByb21pc2U8VD4pOiBPYnNlcnZhYmxlPFQ+O1xuICAgIH1cbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvOiBSeC5PYnNlcnZhYmxlPHN0cmluZz47XG4gICAgdmFyIHA6IFJ4LlByb21pc2U8c3RyaW5nPjtcbiAgICB2YXIgZTogUnguT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIHZhciBvbjogUnguT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHZhciBwbjogUnguUHJvbWlzZTxudW1iZXI+O1xuICAgIHZhciBlbjogUnguT2JzZXJ2YWJsZTxudW1iZXI+O1xuXG4gICAgdmFyIHNvIDogeyBba2V5OiBzdHJpbmddOiBSeC5PYnNlcnZhYmxlT3JQcm9taXNlPHN0cmluZz47IH0gPSB7fTtcbiAgICBzb1snYWJjJ10gPSBwO1xuICAgIHNvWydkZWYnXSA9IGU7XG4gICAgc29bJ3h5eiddID0gbztcblxuICAgIHZhciBubyA6IHsgW2tleTogbnVtYmVyXTogUnguT2JzZXJ2YWJsZU9yUHJvbWlzZTxudW1iZXI+OyB9ID0ge31cbiAgICBub1sxXSA9IHBuO1xuICAgIG5vWzJdID0gZW47XG4gICAgbm9bM10gPSBvbjtcblxuICAgIG8gPSBSeC5PYnNlcnZhYmxlLmNhc2UoKCkgPT4gJ2FiYycsIHNvKVxuICAgIG8gPSBSeC5PYnNlcnZhYmxlLmNhc2UoKCkgPT4gJ2FiYycsIHNvLCBlKVxuICAgIG8gPSBSeC5PYnNlcnZhYmxlLmNhc2UoKCkgPT4gJ2FiYycsIHNvLCBSeC5TY2hlZHVsZXIuYXN5bmMpO1xuXG4gICAgb24gPSBSeC5PYnNlcnZhYmxlLmNhc2UoKCkgPT4gMSwgbm8pXG4gICAgb24gPSBSeC5PYnNlcnZhYmxlLmNhc2UoKCkgPT4gMiwgbm8sIGVuKTtcbiAgICBvbiA9IFJ4Lk9ic2VydmFibGUuY2FzZSgoKSA9PiAzLCBubywgUnguU2NoZWR1bGVyLmFzeW5jKTtcbn0pO1xuIl19