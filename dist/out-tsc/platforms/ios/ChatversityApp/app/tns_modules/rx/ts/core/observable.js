/// <reference path="./es6.ts" />
/// <reference path="./disposables/disposable.ts" />
/// <reference path="./observer-lite.ts" />
var Rx;
(function (Rx) {
    var config;
    (function (config) {
    })(config = Rx.config || (Rx.config = {}));
    var helpers;
    (function (helpers) {
    })(helpers = Rx.helpers || (Rx.helpers = {}));
})(Rx || (Rx = {}));
(function () {
    var observer;
    var observable;
    observable.subscribe(observer);
    observable.subscribe(function (v) { });
    observable.subscribe(function (v) { }, function (e) { });
    observable.subscribe(function (v) { }, function (e) { }, function () { });
    observable.subscribeOnNext(function (v) { });
    observable.subscribeOnNext(function (v) { }, {});
    observable.subscribeOnError(function (v) { });
    observable.subscribeOnError(function (v) { }, {});
    observable.subscribeOnCompleted(function () { });
    observable.subscribeOnCompleted(function () { }, {});
    observable.forEach(observer);
    observable.forEach(function (v) { });
    observable.forEach(function (v) { }, function (e) { });
    observable.forEach(function (v) { }, function (e) { }, function () { });
    Rx.Observable.isObservable({});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvQ2hhdHZlcnNpdHlBcHAvYXBwL3Ruc19tb2R1bGVzL3J4L3RzL2NvcmUvb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFDakMsb0RBQW9EO0FBQ3BELDJDQUEyQztBQUMzQyxJQUFPLEVBQUUsQ0FzSFI7QUF0SEQsV0FBTyxFQUFFO0lBQ0wsSUFBYyxNQUFNLENBRW5CO0lBRkQsV0FBYyxNQUFNO0lBRXBCLENBQUMsRUFGYSxNQUFNLEdBQU4sU0FBTSxLQUFOLFNBQU0sUUFFbkI7SUFFRCxJQUFjLE9BQU8sQ0FhcEI7SUFiRCxXQUFjLE9BQU87SUFhckIsQ0FBQyxFQWJhLE9BQU8sR0FBUCxVQUFPLEtBQVAsVUFBTyxRQWFwQjtBQW9HTCxDQUFDLEVBdEhNLEVBQUUsS0FBRixFQUFFLFFBc0hSO0FBR0QsQ0FBQztJQUNHLElBQUksUUFBOEIsQ0FBQztJQUNuQyxJQUFJLFVBQWlDLENBQUM7SUFFdEMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixVQUFVLENBQUMsU0FBUyxDQUFDLFVBQUMsQ0FBQyxJQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLElBQU0sQ0FBQyxFQUFFLFVBQUMsQ0FBQyxJQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzNDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFDLElBQU0sQ0FBQyxFQUFFLFVBQUMsQ0FBQyxJQUFNLENBQUMsRUFBRSxjQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXJELFVBQVUsQ0FBQyxlQUFlLENBQUMsVUFBQyxDQUFDLElBQU0sQ0FBQyxDQUFDLENBQUM7SUFDdEMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxVQUFDLENBQUMsSUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFMUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFVBQUMsQ0FBQyxJQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFDLENBQUMsSUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFM0MsVUFBVSxDQUFDLG9CQUFvQixDQUFDLGNBQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLGNBQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsSUFBTSxDQUFDLENBQUMsQ0FBQztJQUM5QixVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFNLENBQUMsRUFBRSxVQUFDLENBQUMsSUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6QyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFNLENBQUMsRUFBRSxVQUFDLENBQUMsSUFBTSxDQUFDLEVBQUUsY0FBTyxDQUFDLENBQUMsQ0FBQztJQUVuRCxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2VzNi50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9kaXNwb3NhYmxlcy9kaXNwb3NhYmxlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL29ic2VydmVyLWxpdGUudHNcIiAvPlxubW9kdWxlIFJ4IHtcbiAgICBleHBvcnQgbW9kdWxlIGNvbmZpZyB7XG4gICAgICAgIGV4cG9ydCB2YXIgUHJvbWlzZTogeyBuZXcgPFQ+KHJlc29sdmVyOiAocmVzb2x2ZVByb21pc2U6ICh2YWx1ZTogVCkgPT4gdm9pZCwgcmVqZWN0UHJvbWlzZTogKHJlYXNvbjogYW55KSA9PiB2b2lkKSA9PiB2b2lkKTogSVByb21pc2U8VD47IH07XG4gICAgfVxuXG4gICAgZXhwb3J0IG1vZHVsZSBoZWxwZXJzIHtcbiAgICAgICAgZXhwb3J0IHZhciBub29wOiAoKSA9PiB2b2lkO1xuICAgICAgICBleHBvcnQgdmFyIG5vdERlZmluZWQ6ICh2YWx1ZTogYW55KSA9PiBib29sZWFuO1xuICAgICAgICBleHBvcnQgdmFyIGlkZW50aXR5OiA8VD4odmFsdWU6IFQpID0+IFQ7XG4gICAgICAgIGV4cG9ydCB2YXIgZGVmYXVsdE5vdzogKCkgPT4gbnVtYmVyO1xuICAgICAgICBleHBvcnQgdmFyIGRlZmF1bHRDb21wYXJlcjogKGxlZnQ6IGFueSwgcmlnaHQ6IGFueSkgPT4gIGJvb2xlYW47XG4gICAgICAgIGV4cG9ydCB2YXIgZGVmYXVsdFN1YkNvbXBhcmVyOiAobGVmdDogYW55LCByaWdodDogYW55KSA9PiAgbnVtYmVyO1xuICAgICAgICBleHBvcnQgdmFyIGRlZmF1bHRLZXlTZXJpYWxpemVyOiAoa2V5OiBhbnkpID0+ICBzdHJpbmc7XG4gICAgICAgIGV4cG9ydCB2YXIgZGVmYXVsdEVycm9yOiAoZXJyOiBhbnkpID0+ICB2b2lkO1xuICAgICAgICBleHBvcnQgdmFyIGlzUHJvbWlzZTogKHA6IGFueSkgPT4gIGJvb2xlYW47XG4gICAgICAgIGV4cG9ydCB2YXIgYXNBcnJheTogPFQ+KC4uLmFyZ3M6IFRbXSkgPT4gIFRbXTtcbiAgICAgICAgZXhwb3J0IHZhciBub3Q6ICh2YWx1ZTogYW55KSA9PiAgYm9vbGVhbjtcbiAgICAgICAgZXhwb3J0IHZhciBpc0Z1bmN0aW9uOiAodmFsdWU6IGFueSkgPT4gIGJvb2xlYW47XG4gICAgfVxuXG4gICAgZXhwb3J0IHR5cGUgX1NlbGVjdG9yPFQsIFRSZXN1bHQ+ID0gKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPFQ+KSA9PiBUUmVzdWx0O1xuICAgIGV4cG9ydCB0eXBlIF9WYWx1ZU9yU2VsZWN0b3I8VCwgVFJlc3VsdD4gPSBUUmVzdWx0IHwgX1NlbGVjdG9yPFQsIFRSZXN1bHQ+O1xuICAgIGV4cG9ydCB0eXBlIF9QcmVkaWNhdGU8VD4gPSBfU2VsZWN0b3I8VCwgYm9vbGVhbj47XG4gICAgZXhwb3J0IHR5cGUgX0NvbXBhcmVyPFQsIFRSZXN1bHQ+ID0gKHZhbHVlMTogVCwgdmFsdWUyOiBUKSA9PiBUUmVzdWx0O1xuICAgIGV4cG9ydCB0eXBlIF9BY2N1bXVsYXRvcjxULCBUQWNjPiA9IChhY2M6IFRBY2MsIHZhbHVlOiBUKSA9PiBUQWNjO1xuXG4gICAgZXhwb3J0IG1vZHVsZSBzcGVjaWFsIHtcbiAgICAgICAgZXhwb3J0IHR5cGUgX0ZsYXRNYXBSZXN1bHRTZWxlY3RvcjxUMSwgVDIsIFRSZXN1bHQ+ID0gKHZhbHVlOiBUMSwgc2VsZWN0b3JWYWx1ZTogVDIsIGluZGV4OiBudW1iZXIsIHNlbGVjdG9yT3RoZXI6IG51bWJlcikgPT4gVFJlc3VsdDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElPYnNlcnZhYmxlPFQ+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgc3Vic2NyaWJlKG9ic2VydmVyOiBJT2JzZXJ2ZXI8VD4pOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgc3Vic2NyaWJlKG9uTmV4dD86ICh2YWx1ZTogVCkgPT4gdm9pZCwgb25FcnJvcj86IChleGNlcHRpb246IGFueSkgPT4gdm9pZCwgb25Db21wbGV0ZWQ/OiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgc3Vic2NyaWJlKG9ic2VydmVyOiBJT2JzZXJ2ZXI8VD4pOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgc3Vic2NyaWJlKG9uTmV4dD86ICh2YWx1ZTogVCkgPT4gdm9pZCwgb25FcnJvcj86IChleGNlcHRpb246IGFueSkgPT4gdm9pZCwgb25Db21wbGV0ZWQ/OiAoKSA9PiB2b2lkKTogSURpc3Bvc2FibGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogU3Vic2NyaWJlcyB0byB0aGUgbmV4dCB2YWx1ZSBpbiB0aGUgc2VxdWVuY2Ugd2l0aCBhbiBvcHRpb25hbCBcInRoaXNcIiBhcmd1bWVudC5cbiAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbk5leHQgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSBvbiBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogQHBhcmFtIHtBbnl9IFt0aGlzQXJnXSBPYmplY3QgdG8gdXNlIGFzIHRoaXMgd2hlbiBleGVjdXRpbmcgY2FsbGJhY2suXG4gICAgICAgICogQHJldHVybnMge0Rpc3Bvc2FibGV9IEEgZGlzcG9zYWJsZSBoYW5kbGluZyB0aGUgc3Vic2NyaXB0aW9ucyBhbmQgdW5zdWJzY3JpcHRpb25zLlxuICAgICAgICAqL1xuICAgICAgICBzdWJzY3JpYmVPbk5leHQob25OZXh0OiAodmFsdWU6IFQpID0+IHZvaWQsIHRoaXNBcmc/OiBhbnkpOiBJRGlzcG9zYWJsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICogU3Vic2NyaWJlcyB0byBhbiBleGNlcHRpb25hbCBjb25kaXRpb24gaW4gdGhlIHNlcXVlbmNlIHdpdGggYW4gb3B0aW9uYWwgXCJ0aGlzXCIgYXJndW1lbnQuXG4gICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25FcnJvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogQHBhcmFtIHtBbnl9IFt0aGlzQXJnXSBPYmplY3QgdG8gdXNlIGFzIHRoaXMgd2hlbiBleGVjdXRpbmcgY2FsbGJhY2suXG4gICAgICAgICogQHJldHVybnMge0Rpc3Bvc2FibGV9IEEgZGlzcG9zYWJsZSBoYW5kbGluZyB0aGUgc3Vic2NyaXB0aW9ucyBhbmQgdW5zdWJzY3JpcHRpb25zLlxuICAgICAgICAqL1xuICAgICAgICBzdWJzY3JpYmVPbkVycm9yKG9uRXJyb3I6IChleGNlcHRpb246IGFueSkgPT4gdm9pZCwgdGhpc0FyZz86IGFueSk6IElEaXNwb3NhYmxlO1xuICAgICAgICAvKipcbiAgICAgICAgKiBTdWJzY3JpYmVzIHRvIHRoZSBuZXh0IHZhbHVlIGluIHRoZSBzZXF1ZW5jZSB3aXRoIGFuIG9wdGlvbmFsIFwidGhpc1wiIGFyZ3VtZW50LlxuICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQ29tcGxldGVkIFRoZSBmdW5jdGlvbiB0byBpbnZva2UgdXBvbiBncmFjZWZ1bCB0ZXJtaW5hdGlvbiBvZiB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiBAcGFyYW0ge0FueX0gW3RoaXNBcmddIE9iamVjdCB0byB1c2UgYXMgdGhpcyB3aGVuIGV4ZWN1dGluZyBjYWxsYmFjay5cbiAgICAgICAgKiBAcmV0dXJucyB7RGlzcG9zYWJsZX0gQSBkaXNwb3NhYmxlIGhhbmRsaW5nIHRoZSBzdWJzY3JpcHRpb25zIGFuZCB1bnN1YnNjcmlwdGlvbnMuXG4gICAgICAgICovXG4gICAgICAgIHN1YnNjcmliZU9uQ29tcGxldGVkKG9uQ29tcGxldGVkOiAoKSA9PiB2b2lkLCB0aGlzQXJnPzogYW55KTogSURpc3Bvc2FibGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgZm9yRWFjaChvYnNlcnZlcjogSU9ic2VydmVyPFQ+KTogSURpc3Bvc2FibGU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIFN1YnNjcmliZXMgYW4gbyB0byB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAgICAgKiAgQHBhcmFtIHtNaXhlZH0gW29Pck9uTmV4dF0gVGhlIG9iamVjdCB0aGF0IGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvciBhbiBhY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSBBY3Rpb24gdG8gaW52b2tlIHVwb24gZXhjZXB0aW9uYWwgdGVybWluYXRpb24gb2YgdGhlIG9ic2VydmFibGUgc2VxdWVuY2UuXG4gICAgICAgICogIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlZF0gQWN0aW9uIHRvIGludm9rZSB1cG9uIGdyYWNlZnVsIHRlcm1pbmF0aW9uIG9mIHRoZSBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICAgICAqICBAcmV0dXJucyB7RGlwb3NhYmxlfSBBIGRpc3Bvc2FibGUgaGFuZGxpbmcgdGhlIHN1YnNjcmlwdGlvbnMgYW5kIHVuc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgKi9cbiAgICAgICAgZm9yRWFjaChvbk5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsIG9uRXJyb3I/OiAoZXhjZXB0aW9uOiBhbnkpID0+IHZvaWQsIG9uQ29tcGxldGVkPzogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZVN0YXRpYyB7XG4gICAgICAgIC8qKlxuICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIE9ic2VydmFibGVcbiAgICAgICAgKiBAcGFyYW0ge0FueX0gQW4gb2JqZWN0IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGlzIGFuIE9ic2VydmFibGVcbiAgICAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBhbiBPYnNlcnZhYmxlLCBlbHNlIGZhbHNlLlxuICAgICAgICAqL1xuICAgICAgICBpc09ic2VydmFibGUobzogYW55KTogYm9vbGVhbjtcbiAgICB9XG5cbiAgICBleHBvcnQgdmFyIE9ic2VydmFibGU6IE9ic2VydmFibGVTdGF0aWM7XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYnNlcnZlcjogUnguSU9ic2VydmVyPG51bWJlcj47XG4gICAgdmFyIG9ic2VydmFibGU6IFJ4Lk9ic2VydmFibGU8bnVtYmVyPjtcblxuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSgodikgPT4ge30pO1xuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKCh2KSA9PiB7fSwgKGUpID0+IHt9KTtcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZSgodikgPT4ge30sIChlKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gICAgb2JzZXJ2YWJsZS5zdWJzY3JpYmVPbk5leHQoKHYpID0+IHt9KTtcbiAgICBvYnNlcnZhYmxlLnN1YnNjcmliZU9uTmV4dCgodikgPT4ge30sIHt9KTtcblxuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlT25FcnJvcigodikgPT4ge30pO1xuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlT25FcnJvcigodikgPT4ge30sIHt9KTtcblxuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlT25Db21wbGV0ZWQoKCkgPT4ge30pO1xuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlT25Db21wbGV0ZWQoKCkgPT4ge30sIHt9KTtcblxuICAgIG9ic2VydmFibGUuZm9yRWFjaChvYnNlcnZlcik7XG4gICAgb2JzZXJ2YWJsZS5mb3JFYWNoKCh2KSA9PiB7fSk7XG4gICAgb2JzZXJ2YWJsZS5mb3JFYWNoKCh2KSA9PiB7fSwgKGUpID0+IHt9KTtcbiAgICBvYnNlcnZhYmxlLmZvckVhY2goKHYpID0+IHt9LCAoZSkgPT4ge30sICgpID0+IHt9KTtcblxuICAgIFJ4Lk9ic2VydmFibGUuaXNPYnNlcnZhYmxlKHt9KTtcbn0pO1xuIl19