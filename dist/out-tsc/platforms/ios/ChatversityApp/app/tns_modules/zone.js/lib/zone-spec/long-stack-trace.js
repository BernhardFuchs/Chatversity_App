/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @fileoverview
 * @suppress {globalThis}
 */
var NEWLINE = '\n';
var IGNORE_FRAMES = {};
var creationTrace = '__creationTrace__';
var ERROR_TAG = 'STACKTRACE TRACKING';
var SEP_TAG = '__SEP_TAG__';
var sepTemplate = SEP_TAG + '@[native]';
var LongStackTrace = /** @class */ (function () {
    function LongStackTrace() {
        this.error = getStacktrace();
        this.timestamp = new Date();
    }
    return LongStackTrace;
}());
function getStacktraceWithUncaughtError() {
    return new Error(ERROR_TAG);
}
function getStacktraceWithCaughtError() {
    try {
        throw getStacktraceWithUncaughtError();
    }
    catch (err) {
        return err;
    }
}
// Some implementations of exception handling don't create a stack trace if the exception
// isn't thrown, however it's faster not to actually throw the exception.
var error = getStacktraceWithUncaughtError();
var caughtError = getStacktraceWithCaughtError();
var getStacktrace = error.stack ?
    getStacktraceWithUncaughtError :
    (caughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);
function getFrames(error) {
    return error.stack ? error.stack.split(NEWLINE) : [];
}
function addErrorStack(lines, error) {
    var trace = getFrames(error);
    for (var i = 0; i < trace.length; i++) {
        var frame = trace[i];
        // Filter out the Frames which are part of stack capturing.
        if (!IGNORE_FRAMES.hasOwnProperty(frame)) {
            lines.push(trace[i]);
        }
    }
}
function renderLongStackTrace(frames, stack) {
    var longTrace = [stack ? stack.trim() : ''];
    if (frames) {
        var timestamp = new Date().getTime();
        for (var i = 0; i < frames.length; i++) {
            var traceFrames = frames[i];
            var lastTime = traceFrames.timestamp;
            var separator = "____________________Elapsed " + (timestamp - lastTime.getTime()) + " ms; At: " + lastTime;
            separator = separator.replace(/[^\w\d]/g, '_');
            longTrace.push(sepTemplate.replace(SEP_TAG, separator));
            addErrorStack(longTrace, traceFrames.error);
            timestamp = lastTime.getTime();
        }
    }
    return longTrace.join(NEWLINE);
}
Zone['longStackTraceZoneSpec'] = {
    name: 'long-stack-trace',
    longStackTraceLimit: 10,
    // add a getLongStackTrace method in spec to
    // handle handled reject promise error.
    getLongStackTrace: function (error) {
        if (!error) {
            return undefined;
        }
        var trace = error[Zone.__symbol__('currentTaskTrace')];
        if (!trace) {
            return error.stack;
        }
        return renderLongStackTrace(trace, error.stack);
    },
    onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
        if (Error.stackTraceLimit > 0) {
            // if Error.stackTraceLimit is 0, means stack trace
            // is disabled, so we don't need to generate long stack trace
            // this will improve performance in some test(some test will
            // set stackTraceLimit to 0, https://github.com/angular/zone.js/issues/698
            var currentTask = Zone.currentTask;
            var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];
            trace = [new LongStackTrace()].concat(trace);
            if (trace.length > this.longStackTraceLimit) {
                trace.length = this.longStackTraceLimit;
            }
            if (!task.data)
                task.data = {};
            task.data[creationTrace] = trace;
        }
        return parentZoneDelegate.scheduleTask(targetZone, task);
    },
    onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {
        if (Error.stackTraceLimit > 0) {
            // if Error.stackTraceLimit is 0, means stack trace
            // is disabled, so we don't need to generate long stack trace
            // this will improve performance in some test(some test will
            // set stackTraceLimit to 0, https://github.com/angular/zone.js/issues/698
            var parentTask = Zone.currentTask || error.task;
            if (error instanceof Error && parentTask) {
                var longStack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);
                try {
                    error.stack = error.longStack = longStack;
                }
                catch (err) {
                }
            }
        }
        return parentZoneDelegate.handleError(targetZone, error);
    }
};
function captureStackTraces(stackTraces, count) {
    if (count > 0) {
        stackTraces.push(getFrames((new LongStackTrace()).error));
        captureStackTraces(stackTraces, count - 1);
    }
}
function computeIgnoreFrames() {
    if (Error.stackTraceLimit <= 0) {
        return;
    }
    var frames = [];
    captureStackTraces(frames, 2);
    var frames1 = frames[0];
    var frames2 = frames[1];
    for (var i = 0; i < frames1.length; i++) {
        var frame1 = frames1[i];
        if (frame1.indexOf(ERROR_TAG) == -1) {
            var match = frame1.match(/^\s*at\s+/);
            if (match) {
                sepTemplate = match[0] + SEP_TAG + ' (http://localhost)';
                break;
            }
        }
    }
    for (var i = 0; i < frames1.length; i++) {
        var frame1 = frames1[i];
        var frame2 = frames2[i];
        if (frame1 === frame2) {
            IGNORE_FRAMES[frame1] = true;
        }
        else {
            break;
        }
    }
}
computeIgnoreFrames();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy1zdGFjay10cmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvQ2hhdHZlcnNpdHlBcHAvYXBwL3Ruc19tb2R1bGVzL3pvbmUuanMvbGliL3pvbmUtc3BlYy9sb25nLXN0YWNrLXRyYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNIOzs7R0FHRztBQUVILElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztBQUNyQixJQUFNLGFBQWEsR0FBd0IsRUFBRSxDQUFDO0FBQzlDLElBQU0sYUFBYSxHQUFHLG1CQUFtQixDQUFDO0FBQzFDLElBQU0sU0FBUyxHQUFHLHFCQUFxQixDQUFDO0FBQ3hDLElBQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQztBQUM5QixJQUFJLFdBQVcsR0FBVyxPQUFPLEdBQUcsV0FBVyxDQUFDO0FBRWhEO0lBQUE7UUFDRSxVQUFLLEdBQVUsYUFBYSxFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFTLElBQUksSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7QUFFRCxTQUFTLDhCQUE4QjtJQUNyQyxPQUFPLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFTLDRCQUE0QjtJQUNuQyxJQUFJO1FBQ0YsTUFBTSw4QkFBOEIsRUFBRSxDQUFDO0tBQ3hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLEdBQUcsQ0FBQztLQUNaO0FBQ0gsQ0FBQztBQUVELHlGQUF5RjtBQUN6Rix5RUFBeUU7QUFDekUsSUFBTSxLQUFLLEdBQUcsOEJBQThCLEVBQUUsQ0FBQztBQUMvQyxJQUFNLFdBQVcsR0FBRyw0QkFBNEIsRUFBRSxDQUFDO0FBQ25ELElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQiw4QkFB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QUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3RDLElBQUksS0FBSyxFQUFFO2dCQUNULFdBQVcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxHQUFHLHFCQUFxQixDQUFDO2dCQUN6RCxNQUFNO2FBQ1A7U0FDRjtLQUNGO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdkMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7WUFDckIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztTQUM5QjthQUFNO1lBQ0wsTUFBTTtTQUNQO0tBQ0Y7QUFDSCxDQUFDO0FBQ0QsbUJBQW1CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogQHN1cHByZXNzIHtnbG9iYWxUaGlzfVxuICovXG5cbmNvbnN0IE5FV0xJTkUgPSAnXFxuJztcbmNvbnN0IElHTk9SRV9GUkFNRVM6IHtbazogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcbmNvbnN0IGNyZWF0aW9uVHJhY2UgPSAnX19jcmVhdGlvblRyYWNlX18nO1xuY29uc3QgRVJST1JfVEFHID0gJ1NUQUNLVFJBQ0UgVFJBQ0tJTkcnO1xuY29uc3QgU0VQX1RBRyA9ICdfX1NFUF9UQUdfXyc7XG5sZXQgc2VwVGVtcGxhdGU6IHN0cmluZyA9IFNFUF9UQUcgKyAnQFtuYXRpdmVdJztcblxuY2xhc3MgTG9uZ1N0YWNrVHJhY2Uge1xuICBlcnJvcjogRXJyb3IgPSBnZXRTdGFja3RyYWNlKCk7XG4gIHRpbWVzdGFtcDogRGF0ZSA9IG5ldyBEYXRlKCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0YWNrdHJhY2VXaXRoVW5jYXVnaHRFcnJvcigpOiBFcnJvciB7XG4gIHJldHVybiBuZXcgRXJyb3IoRVJST1JfVEFHKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhY2t0cmFjZVdpdGhDYXVnaHRFcnJvcigpOiBFcnJvciB7XG4gIHRyeSB7XG4gICAgdGhyb3cgZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbn1cblxuLy8gU29tZSBpbXBsZW1lbnRhdGlvbnMgb2YgZXhjZXB0aW9uIGhhbmRsaW5nIGRvbid0IGNyZWF0ZSBhIHN0YWNrIHRyYWNlIGlmIHRoZSBleGNlcHRpb25cbi8vIGlzbid0IHRocm93biwgaG93ZXZlciBpdCdzIGZhc3RlciBub3QgdG8gYWN0dWFsbHkgdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbmNvbnN0IGVycm9yID0gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKCk7XG5jb25zdCBjYXVnaHRFcnJvciA9IGdldFN0YWNrdHJhY2VXaXRoQ2F1Z2h0RXJyb3IoKTtcbmNvbnN0IGdldFN0YWNrdHJhY2UgPSBlcnJvci5zdGFjayA/XG4gICAgZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yIDpcbiAgICAoY2F1Z2h0RXJyb3Iuc3RhY2sgPyBnZXRTdGFja3RyYWNlV2l0aENhdWdodEVycm9yIDogZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKTtcblxuZnVuY3Rpb24gZ2V0RnJhbWVzKGVycm9yOiBFcnJvcik6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIGVycm9yLnN0YWNrID8gZXJyb3Iuc3RhY2suc3BsaXQoTkVXTElORSkgOiBbXTtcbn1cblxuZnVuY3Rpb24gYWRkRXJyb3JTdGFjayhsaW5lczogc3RyaW5nW10sIGVycm9yOiBFcnJvcik6IHZvaWQge1xuICBsZXQgdHJhY2U6IHN0cmluZ1tdID0gZ2V0RnJhbWVzKGVycm9yKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFjZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGZyYW1lID0gdHJhY2VbaV07XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgRnJhbWVzIHdoaWNoIGFyZSBwYXJ0IG9mIHN0YWNrIGNhcHR1cmluZy5cbiAgICBpZiAoIUlHTk9SRV9GUkFNRVMuaGFzT3duUHJvcGVydHkoZnJhbWUpKSB7XG4gICAgICBsaW5lcy5wdXNoKHRyYWNlW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTG9uZ1N0YWNrVHJhY2UoZnJhbWVzOiBMb25nU3RhY2tUcmFjZVtdLCBzdGFjaz86IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGxvbmdUcmFjZTogc3RyaW5nW10gPSBbc3RhY2sgPyBzdGFjay50cmltKCkgOiAnJ107XG5cbiAgaWYgKGZyYW1lcykge1xuICAgIGxldCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdHJhY2VGcmFtZXM6IExvbmdTdGFja1RyYWNlID0gZnJhbWVzW2ldO1xuICAgICAgY29uc3QgbGFzdFRpbWUgPSB0cmFjZUZyYW1lcy50aW1lc3RhbXA7XG4gICAgICBsZXQgc2VwYXJhdG9yID1cbiAgICAgICAgICBgX19fX19fX19fX19fX19fX19fX19FbGFwc2VkICR7dGltZXN0YW1wIC0gbGFzdFRpbWUuZ2V0VGltZSgpfSBtczsgQXQ6ICR7bGFzdFRpbWV9YDtcbiAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvci5yZXBsYWNlKC9bXlxcd1xcZF0vZywgJ18nKTtcbiAgICAgIGxvbmdUcmFjZS5wdXNoKHNlcFRlbXBsYXRlLnJlcGxhY2UoU0VQX1RBRywgc2VwYXJhdG9yKSk7XG4gICAgICBhZGRFcnJvclN0YWNrKGxvbmdUcmFjZSwgdHJhY2VGcmFtZXMuZXJyb3IpO1xuXG4gICAgICB0aW1lc3RhbXAgPSBsYXN0VGltZS5nZXRUaW1lKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvbmdUcmFjZS5qb2luKE5FV0xJTkUpO1xufVxuXG4oWm9uZSBhcyBhbnkpWydsb25nU3RhY2tUcmFjZVpvbmVTcGVjJ10gPSA8Wm9uZVNwZWM+e1xuICBuYW1lOiAnbG9uZy1zdGFjay10cmFjZScsXG4gIGxvbmdTdGFja1RyYWNlTGltaXQ6IDEwLCAgLy8gTWF4IG51bWJlciBvZiB0YXNrIHRvIGtlZXAgdGhlIHN0YWNrIHRyYWNlIGZvci5cbiAgLy8gYWRkIGEgZ2V0TG9uZ1N0YWNrVHJhY2UgbWV0aG9kIGluIHNwZWMgdG9cbiAgLy8gaGFuZGxlIGhhbmRsZWQgcmVqZWN0IHByb21pc2UgZXJyb3IuXG4gIGdldExvbmdTdGFja1RyYWNlOiBmdW5jdGlvbihlcnJvcjogRXJyb3IpOiBzdHJpbmcgfFxuICAgICAgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhY2UgPSAoZXJyb3IgYXMgYW55KVsoWm9uZSBhcyBhbnkpLl9fc3ltYm9sX18oJ2N1cnJlbnRUYXNrVHJhY2UnKV07XG4gICAgICAgIGlmICghdHJhY2UpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3Iuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbmRlckxvbmdTdGFja1RyYWNlKHRyYWNlLCBlcnJvci5zdGFjayk7XG4gICAgICB9LFxuXG4gIG9uU2NoZWR1bGVUYXNrOiBmdW5jdGlvbihcbiAgICAgIHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSwgdGFzazogVGFzayk6IGFueSB7XG4gICAgaWYgKEVycm9yLnN0YWNrVHJhY2VMaW1pdCA+IDApIHtcbiAgICAgIC8vIGlmIEVycm9yLnN0YWNrVHJhY2VMaW1pdCBpcyAwLCBtZWFucyBzdGFjayB0cmFjZVxuICAgICAgLy8gaXMgZGlzYWJsZWQsIHNvIHdlIGRvbid0IG5lZWQgdG8gZ2VuZXJhdGUgbG9uZyBzdGFjayB0cmFjZVxuICAgICAgLy8gdGhpcyB3aWxsIGltcHJvdmUgcGVyZm9ybWFuY2UgaW4gc29tZSB0ZXN0KHNvbWUgdGVzdCB3aWxsXG4gICAgICAvLyBzZXQgc3RhY2tUcmFjZUxpbWl0IHRvIDAsIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3pvbmUuanMvaXNzdWVzLzY5OFxuICAgICAgY29uc3QgY3VycmVudFRhc2sgPSBab25lLmN1cnJlbnRUYXNrO1xuICAgICAgbGV0IHRyYWNlID0gY3VycmVudFRhc2sgJiYgY3VycmVudFRhc2suZGF0YSAmJiAoY3VycmVudFRhc2suZGF0YSBhcyBhbnkpW2NyZWF0aW9uVHJhY2VdIHx8IFtdO1xuICAgICAgdHJhY2UgPSBbbmV3IExvbmdTdGFja1RyYWNlKCldLmNvbmNhdCh0cmFjZSk7XG4gICAgICBpZiAodHJhY2UubGVuZ3RoID4gdGhpcy5sb25nU3RhY2tUcmFjZUxpbWl0KSB7XG4gICAgICAgIHRyYWNlLmxlbmd0aCA9IHRoaXMubG9uZ1N0YWNrVHJhY2VMaW1pdDtcbiAgICAgIH1cbiAgICAgIGlmICghdGFzay5kYXRhKSB0YXNrLmRhdGEgPSB7fTtcbiAgICAgICh0YXNrLmRhdGEgYXMgYW55KVtjcmVhdGlvblRyYWNlXSA9IHRyYWNlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Wm9uZURlbGVnYXRlLnNjaGVkdWxlVGFzayh0YXJnZXRab25lLCB0YXNrKTtcbiAgfSxcblxuICBvbkhhbmRsZUVycm9yOiBmdW5jdGlvbihcbiAgICAgIHBhcmVudFpvbmVEZWxlZ2F0ZTogWm9uZURlbGVnYXRlLCBjdXJyZW50Wm9uZTogWm9uZSwgdGFyZ2V0Wm9uZTogWm9uZSwgZXJyb3I6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChFcnJvci5zdGFja1RyYWNlTGltaXQgPiAwKSB7XG4gICAgICAvLyBpZiBFcnJvci5zdGFja1RyYWNlTGltaXQgaXMgMCwgbWVhbnMgc3RhY2sgdHJhY2VcbiAgICAgIC8vIGlzIGRpc2FibGVkLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGdlbmVyYXRlIGxvbmcgc3RhY2sgdHJhY2VcbiAgICAgIC8vIHRoaXMgd2lsbCBpbXByb3ZlIHBlcmZvcm1hbmNlIGluIHNvbWUgdGVzdChzb21lIHRlc3Qgd2lsbFxuICAgICAgLy8gc2V0IHN0YWNrVHJhY2VMaW1pdCB0byAwLCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci96b25lLmpzL2lzc3Vlcy82OThcbiAgICAgIGNvbnN0IHBhcmVudFRhc2sgPSBab25lLmN1cnJlbnRUYXNrIHx8IGVycm9yLnRhc2s7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBwYXJlbnRUYXNrKSB7XG4gICAgICAgIGNvbnN0IGxvbmdTdGFjayA9XG4gICAgICAgICAgICByZW5kZXJMb25nU3RhY2tUcmFjZShwYXJlbnRUYXNrLmRhdGEgJiYgcGFyZW50VGFzay5kYXRhW2NyZWF0aW9uVHJhY2VdLCBlcnJvci5zdGFjayk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXJyb3Iuc3RhY2sgPSAoZXJyb3IgYXMgYW55KS5sb25nU3RhY2sgPSBsb25nU3RhY2s7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRab25lRGVsZWdhdGUuaGFuZGxlRXJyb3IodGFyZ2V0Wm9uZSwgZXJyb3IpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjYXB0dXJlU3RhY2tUcmFjZXMoc3RhY2tUcmFjZXM6IHN0cmluZ1tdW10sIGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgaWYgKGNvdW50ID4gMCkge1xuICAgIHN0YWNrVHJhY2VzLnB1c2goZ2V0RnJhbWVzKChuZXcgTG9uZ1N0YWNrVHJhY2UoKSkuZXJyb3IpKTtcbiAgICBjYXB0dXJlU3RhY2tUcmFjZXMoc3RhY2tUcmFjZXMsIGNvdW50IC0gMSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZUlnbm9yZUZyYW1lcygpIHtcbiAgaWYgKEVycm9yLnN0YWNrVHJhY2VMaW1pdCA8PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGZyYW1lczogc3RyaW5nW11bXSA9IFtdO1xuICBjYXB0dXJlU3RhY2tUcmFjZXMoZnJhbWVzLCAyKTtcbiAgY29uc3QgZnJhbWVzMSA9IGZyYW1lc1swXTtcbiAgY29uc3QgZnJhbWVzMiA9IGZyYW1lc1sxXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZnJhbWUxID0gZnJhbWVzMVtpXTtcbiAgICBpZiAoZnJhbWUxLmluZGV4T2YoRVJST1JfVEFHKSA9PSAtMSkge1xuICAgICAgbGV0IG1hdGNoID0gZnJhbWUxLm1hdGNoKC9eXFxzKmF0XFxzKy8pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHNlcFRlbXBsYXRlID0gbWF0Y2hbMF0gKyBTRVBfVEFHICsgJyAoaHR0cDovL2xvY2FsaG9zdCknO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lczEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBmcmFtZTEgPSBmcmFtZXMxW2ldO1xuICAgIGNvbnN0IGZyYW1lMiA9IGZyYW1lczJbaV07XG4gICAgaWYgKGZyYW1lMSA9PT0gZnJhbWUyKSB7XG4gICAgICBJR05PUkVfRlJBTUVTW2ZyYW1lMV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbmNvbXB1dGVJZ25vcmVGcmFtZXMoKTtcbiJdfQ==