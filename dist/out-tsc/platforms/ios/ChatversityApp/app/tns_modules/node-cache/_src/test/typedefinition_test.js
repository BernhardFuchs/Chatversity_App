"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NodeCache = require("../../");
{
    var options = void 0;
    var cache = void 0;
    cache = new NodeCache();
    cache = new NodeCache(options);
}
{
    var cache = void 0;
    var key = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.get(key);
    result = cache.get(key, cb);
}
{
    var cache = void 0;
    var keys = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.mget(keys);
    result = cache.mget(keys, cb);
}
{
    var cache = void 0;
    var key = void 0;
    var value = void 0;
    var ttl = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.set(key, value);
    result = cache.set(key, value, ttl);
    result = cache.set(key, value, ttl, cb);
    result = cache.set(key, value, cb);
}
{
    var cache = void 0;
    var keys = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.del(keys);
    result = cache.del(keys, cb);
}
{
    var cache = void 0;
    var key = void 0;
    var ttl = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.ttl(key);
    result = cache.ttl(key, ttl);
    result = cache.ttl(key, ttl, cb);
    result = cache.ttl(key, cb);
}
{
    var cache = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.keys();
    result = cache.keys(cb);
}
{
    var cache = void 0;
    var result = void 0;
    result = cache.getStats();
}
{
    var cache = void 0;
    var cb = void 0;
    var key = void 0;
    var number = void 0;
    var result1 = void 0;
    var result2 = void 0;
    result1 = cache.getTtl(key);
    result2 = cache.getTtl(key, cb);
}
/* tslint:disable void-return no-void-expression */
{
    var cache = void 0;
    var result = void 0;
    result = cache.flushAll();
}
{
    var cache = void 0;
    var result = void 0;
    result = cache.close();
}
/* tslint:enable void-return */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWRlZmluaXRpb25fdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvQ2hhdHZlcnNpdHlBcHAvYXBwL3Ruc19tb2R1bGVzL25vZGUtY2FjaGUvX3NyYy90ZXN0L3R5cGVkZWZpbml0aW9uX3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxrQ0FBcUM7QUFZckM7SUFDQyxJQUFJLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLElBQUksS0FBSyxTQUFxQixDQUFDO0lBQy9CLEtBQUssR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBQ3hCLEtBQUssR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUMvQjtBQUVEO0lBQ0MsSUFBSSxLQUFLLFNBQVcsQ0FBQztJQUNyQixJQUFJLEdBQUcsU0FBUSxDQUFDO0lBQ2hCLElBQUksRUFBRSxTQUFzQixDQUFDO0lBQzdCLElBQUksTUFBTSxTQUF3QixDQUFDO0lBQ25DLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFhLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUN4QztBQUVEO0lBQ0MsSUFBSSxLQUFLLFNBQVcsQ0FBQztJQUNyQixJQUFJLElBQUksU0FBVSxDQUFDO0lBQ25CLElBQUksRUFBRSxTQUF5QyxDQUFDO0lBQ2hELElBQUksTUFBTSxTQUErQixDQUFDO0lBQzFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFhLElBQUksQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFhLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztDQUMxQztBQUVEO0lBQ0MsSUFBSSxLQUFLLFNBQVcsQ0FBQztJQUNyQixJQUFJLEdBQUcsU0FBUSxDQUFDO0lBQ2hCLElBQUks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ZXNDb250ZW50IjpbIlxuaW1wb3J0IE5vZGVDYWNoZSA9IHJlcXVpcmUoJy4uLy4uLycpO1xuXG5pbXBvcnQgT3B0aW9ucyA9IE5vZGVDYWNoZS5PcHRpb25zO1xuaW1wb3J0IFN0YXRzID0gTm9kZUNhY2hlLlN0YXRzO1xuaW1wb3J0IENhbGxiYWNrID0gTm9kZUNhY2hlLkNhbGxiYWNrO1xuXG5pbnRlcmZhY2UgVHlwZVNhbXBsZSB7XG5cdGE6IG51bWJlcjtcblx0Yjogc3RyaW5nO1xuXHRjOiBib29sZWFuO1xufVxuXG57XG5cdGxldCBvcHRpb25zOiBPcHRpb25zO1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZS5Ob2RlQ2FjaGU7XG5cdGNhY2hlID0gbmV3IE5vZGVDYWNoZSgpO1xuXHRjYWNoZSA9IG5ldyBOb2RlQ2FjaGUob3B0aW9ucyk7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCBrZXk6IHN0cmluZztcblx0bGV0IGNiOiBDYWxsYmFjazxUeXBlU2FtcGxlPjtcblx0bGV0IHJlc3VsdDogVHlwZVNhbXBsZSB8IHVuZGVmaW5lZDtcblx0cmVzdWx0ID0gY2FjaGUuZ2V0PFR5cGVTYW1wbGU+KGtleSk7XG5cdHJlc3VsdCA9IGNhY2hlLmdldDxUeXBlU2FtcGxlPihrZXksIGNiKTtcbn1cblxue1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZTtcblx0bGV0IGtleXM6IHN0cmluZ1tdO1xuXHRsZXQgY2I6IENhbGxiYWNrPHsgW2tleTogc3RyaW5nXTogVHlwZVNhbXBsZSB9Pjtcblx0bGV0IHJlc3VsdDogeyBba2V5OiBzdHJpbmddOiBUeXBlU2FtcGxlIH07XG5cdHJlc3VsdCA9IGNhY2hlLm1nZXQ8VHlwZVNhbXBsZT4oa2V5cyk7XG5cdHJlc3VsdCA9IGNhY2hlLm1nZXQ8VHlwZVNhbXBsZT4oa2V5cywgY2IpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQga2V5OiBzdHJpbmc7XG5cdGxldCB2YWx1ZTogVHlwZVNhbXBsZTtcblx0bGV0IHR0bDogbnVtYmVyIHwgc3RyaW5nO1xuXHRsZXQgY2I6IENhbGxiYWNrPGJvb2xlYW4+O1xuXHRsZXQgcmVzdWx0OiBib29sZWFuO1xuXHRyZXN1bHQgPSBjYWNoZS5zZXQ8VHlwZVNhbXBsZT4oa2V5LCB2YWx1ZSk7XG5cdHJlc3VsdCA9IGNhY2hlLnNldDxUeXBlU2FtcGxlPihrZXksIHZhbHVlLCB0dGwpO1xuXHRyZXN1bHQgPSBjYWNoZS5zZXQ8VHlwZVNhbXBsZT4oa2V5LCB2YWx1ZSwgdHRsLCBjYik7XG5cdHJlc3VsdCA9IGNhY2hlLnNldDxUeXBlU2FtcGxlPihrZXksIHZhbHVlLCBjYik7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCBrZXlzOiBzdHJpbmcgfCBzdHJpbmdbXTtcblx0bGV0IGNiOiBDYWxsYmFjazxudW1iZXI+O1xuXHRsZXQgcmVzdWx0OiBudW1iZXI7XG5cdHJlc3VsdCA9IGNhY2hlLmRlbChrZXlzKTtcblx0cmVzdWx0ID0gY2FjaGUuZGVsKGtleXMsIGNiKTtcbn1cblxue1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZTtcblx0bGV0IGtleTogc3RyaW5nO1xuXHRsZXQgdHRsOiBudW1iZXI7XG5cdGxldCBjYjogQ2FsbGJhY2s8Ym9vbGVhbj47XG5cdGxldCByZXN1bHQ6IGJvb2xlYW47XG5cdHJlc3VsdCA9IGNhY2hlLnR0bChrZXkpO1xuXHRyZXN1bHQgPSBjYWNoZS50dGwoa2V5LCB0dGwpO1xuXHRyZXN1bHQgPSBjYWNoZS50dGwoa2V5LCB0dGwsIGNiKTtcblx0cmVzdWx0ID0gY2FjaGUudHRsKGtleSwgY2IpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQgY2I6IENhbGxiYWNrPHN0cmluZ1tdPjtcblx0bGV0IHJlc3VsdDogc3RyaW5nW107XG5cdHJlc3VsdCA9IGNhY2hlLmtleXMoKTtcblx0cmVzdWx0ID0gY2FjaGUua2V5cyhjYik7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCByZXN1bHQ6IFN0YXRzO1xuXHRyZXN1bHQgPSBjYWNoZS5nZXRTdGF0cygpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQgY2I6IENhbGxiYWNrPEJvb2xlYW4+O1xuXHRsZXQga2V5OiBzdHJpbmc7XG5cdGxldCBudW1iZXI6IG51bWJlcjtcblx0bGV0IHJlc3VsdDE6IG51bWJlciB8IHVuZGVmaW5lZDtcblx0bGV0IHJlc3VsdDI6IEJvb2xlYW47XG5cdHJlc3VsdDEgPSBjYWNoZS5nZXRUdGwoa2V5KTtcblx0cmVzdWx0MiA9IGNhY2hlLmdldFR0bChrZXksIGNiKTtcbn1cblxuLyogdHNsaW50OmRpc2FibGUgdm9pZC1yZXR1cm4gbm8tdm9pZC1leHByZXNzaW9uICovXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQgcmVzdWx0OiB2b2lkO1xuXHRyZXN1bHQgPSBjYWNoZS5mbHVzaEFsbCgpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQgcmVzdWx0OiB2b2lkO1xuXHRyZXN1bHQgPSBjYWNoZS5jbG9zZSgpO1xufVxuLyogdHNsaW50OmVuYWJsZSB2b2lkLXJldHVybiAqL1xuIl19