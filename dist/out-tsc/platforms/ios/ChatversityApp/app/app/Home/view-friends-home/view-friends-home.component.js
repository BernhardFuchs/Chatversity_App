"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var http_1 = require("@angular/common/http");
var environment_prod_1 = require("../../../environments/environment.prod");
var user_service_1 = require("../../Core/_services/user.service");
var messaging_service_1 = require("../../Core/_services/messaging.service");
var app_component_1 = require("../../app.component");
var auth_service_1 = require("../../Core/_services/auth.service");
var ViewFriendsHomeComponent = /** @class */ (function () {
    //
    // ─── CONSTRUCTOR ────────────────────────────────────────────────────────────────
    //
    function ViewFriendsHomeComponent(http, formBuilder, _userService, _msgService, app, _auth) {
        var _this = this;
        this.http = http;
        this.formBuilder = formBuilder;
        this._userService = _userService;
        this._msgService = _msgService;
        this.app = app;
        this._auth = _auth;
        this.loading = false;
        this.submitted = false;
        this.isConnection = false;
        // Field for connection
        this.connectionToAdd = new forms_1.FormControl('');
        this.subscription = this._auth.chatkitUser$.subscribe(function (user) {
            _this.chatkitUser = user;
            console.log(_this.chatkitUser);
            _this.rooms = user.rooms;
            console.log(_this.rooms);
        });
        // this.incomingMessages = this._auth.messages$.subscribe(
        //   (incomingMessage) => {
        //     this.room_messages.push(incomingMessage);
        //   }
        // );
        // this.current_room = this._auth.currentRoom$.subscribe(
        //   (currentRoom) => {
        //     this.current_room = currentRoom;
        //     console.log(currentRoom);
        //   }
        // );
    }
    Object.defineProperty(ViewFriendsHomeComponent.prototype, "f", {
        // ────────────────────────────────────────────────────────────────────────────────
        //
        // ─── CONVENIENCE GETTER FOR EASY ACCESS TO FORM FIELDS ──────────────────────────
        //
        get: function () { return this.searchForm.controls; },
        enumerable: true,
        configurable: true
    });
    // ────────────────────────────────────────────────────────────────────────────────
    //
    // ─── ADD CONNECTION ─────────────────────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.addConnection = function () {
        var _this = this;
        console.log(this.connectionToAdd.value);
        // Get okta user by login (email)
        this.http.get(environment_prod_1.environment.apiUrl + "/okta/GetUserByLogin/" + this.connectionToAdd.value)
            .toPromise()
            .then(function (oktaUser) {
            console.log(oktaUser);
            // Get the user from Chatkit by matching the IDs
            _this.http.get(environment_prod_1.environment.apiUrl + "/chatkit/GetUserById/" + oktaUser['id'])
                .toPromise()
                .then(function (chatkitUser) {
                // Found user => add 'connection request marker' to custom data field
                // TODO: Check if users are already connected
            })
                .catch(function (error) {
                console.log('Chatkit user not found!');
            });
        })
            .catch(function (error) {
            console.log('Okta user not found!');
        });
    };
    // ─────────────────────────────────────────────────────────────────
    //
    // ─── RETURN USER FROM FRIEND LIST ───────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.getUser = function (_id) {
        return this.connections.find(function (c) { return c.id === _id; });
    };
    // ────────────────────────────────────────────────────────────────────────────────
    //
    // ─── SORT CONNECTIONS LIST ──────────────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.sortList = function (users) {
        return users.sort(function (a, b) { return ((a.firstName.toLowerCase() + ' ' + a.lastName.toLowerCase())
            > (b.firstName.toLowerCase() + ' ' + b.lastName.toLowerCase()) ? 1 : -1); });
    };
    // ────────────────────────────────────────────────────────────────────────────────
    //
    // ─── FILTER LIST OF USERS BY NAME ───────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.getUsersByName = function (_name) {
        _name = _name.toLowerCase();
        this.results = this.connections.filter(function (c) {
            return (c.firstName.toLowerCase() + ' ' + c.lastName.toLowerCase()).includes(_name);
        }).slice(0, 5);
    };
    // ────────────────────────────────────────────────────────────────────────────────
    //
    // ─── CHECK IF USERS ARE FRIENDS ─────────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.isConnected = function (_id) {
        // Get current user data
        // Check if this user is on the other user's connections list
        // Toggle isConnection variable
        return;
    };
    // ─────────────────────────────────────────────────────────────────
    //
    // ─── HANDLE CLICK USER BUTTON ───────────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.setUser = function (_id) {
        this.connection = this.getUser(_id);
        this.isConnected(_id);
    };
    // ─────────────────────────────────────────────────────────────────
    //
    // ─── HANDLE SIGN UP ─────────────────────────────────────────────────────────────
    //
    ViewFriendsHomeComponent.prototype.onSearch = function () {
        this.submitted = true;
        this.loading = true;
        if (this.searchForm.invalid) {
            this.submitted = false;
            this.loading = false;
            return;
        }
        var query = this.searchForm.get('search').value;
        this.getUsersByName(query);
        this.loading = false;
    };
    // ────────────────────────────────────────────────────────────────────────────────
    ViewFriendsHomeComponent.prototype.ngOnInit = function () {
        //
        // ─── LOAD USER CONNECTIONS ───────────────────────────────────────
        //
        var _this = this;
        this._userService.getConnections(this.chatkitUser.id)
            .toPromise()
            .then(function (connections) {
            _this.connections = connections;
            console.log(connections);
        });
        // ────────────────────────────────────────────────────────────────────────────────
        //
        // ─── SETUP SEARCH BOX ────────────────────────────────────────────
        //
        this.searchForm = this.formBuilder.group({
            search: ['', forms_1.Validators.required]
        });
        // ─────────────────────────────────────────────────────────────────
    };
    ViewFriendsHomeComponent = __decorate([
        core_1.Component({
            selector: 'app-view-friends-home',
            templateUrl: './view-friends-home.component.html',
            styleUrls: ['./view-friends-home.component.css']
        }),
        __metadata("design:paramtypes", [http_1.HttpClient,
            forms_1.FormBuilder,
            user_service_1.UserService,
            messaging_service_1.MessagingService,
            app_component_1.AppComponent,
            auth_service_1.AuthService])
    ], ViewFriendsHomeComponent);
    return ViewFriendsHomeComponent;
}());
exports.ViewFriendsHomeComponent = ViewFriendsHomeComponent;
//# sourceMappingURL=data:application/json;base64,