"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NodeCache = require("../../");
{
    var options = void 0;
    var cache = void 0;
    cache = new NodeCache();
    cache = new NodeCache(options);
}
{
    var cache = void 0;
    var key = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.get(key);
    result = cache.get(key, cb);
}
{
    var cache = void 0;
    var keys = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.mget(keys);
    result = cache.mget(keys, cb);
}
{
    var cache = void 0;
    var key = void 0;
    var value = void 0;
    var ttl = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.set(key, value);
    result = cache.set(key, value, ttl);
    result = cache.set(key, value, ttl, cb);
    result = cache.set(key, value, cb);
}
{
    var cache = void 0;
    var keys = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.del(keys);
    result = cache.del(keys, cb);
}
{
    var cache = void 0;
    var key = void 0;
    var ttl = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.ttl(key);
    result = cache.ttl(key, ttl);
    result = cache.ttl(key, ttl, cb);
    result = cache.ttl(key, cb);
}
{
    var cache = void 0;
    var cb = void 0;
    var result = void 0;
    result = cache.keys();
    result = cache.keys(cb);
}
{
    var cache = void 0;
    var result = void 0;
    result = cache.getStats();
}
{
    var cache = void 0;
    var cb = void 0;
    var key = void 0;
    var number = void 0;
    var result1 = void 0;
    var result2 = void 0;
    result1 = cache.getTtl(key);
    result2 = cache.getTtl(key, cb);
}
/* tslint:disable void-return no-void-expression */
{
    var cache = void 0;
    var result = void 0;
    result = cache.flushAll();
}
{
    var cache = void 0;
    var result = void 0;
    result = cache.close();
}
/* tslint:enable void-return */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWRlZmluaXRpb25fdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvYnVpbGQvRGVidWctaXBob25lc2ltdWxhdG9yL0NoYXR2ZXJzaXR5QXBwLmFwcC9hcHAvdG5zX21vZHVsZXMvbm9kZS1jYWNoZS9fc3JjL3Rlc3QvdHlwZWRlZmluaXRpb25fdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGtDQUFxQztBQVlyQztJQUNDLElBQUksT0FBTyxTQUFTLENBQUM7SUFDckIsSUFBSSxLQUFLLFNBQXFCLENBQUM7SUFDL0IsS0FBSyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7SUFDeEIsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQy9CO0FBRUQ7SUFDQyxJQUFJLEtBQUssU0FBVyxDQUFDO0lBQ3JCLElBQUksR0FBRyxTQUFRLENBQUM7SUFDaEIsSUFBSSxFQUFFLFNBQXNCLENBQUM7SUFDN0IsSUFBSSxNQUFNLFNBQXdCLENBQUM7SUFDbkMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQWEsR0FBRyxDQUFDLENBQUM7SUFDcEMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQWEsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ3hDO0FBRUQ7SUFDQyxJQUFJLEtBQUssU0FBVyxDQUFDO0lBQ3JCLElBQUksSUFBSSxTQUFVLENBQUM7SUFDbkIsSUFBSSxFQUFFLFNBQXlDLENBQUM7SUFDaEQsSUFBSSxNQUFNLFNBQStCLENBQUM7SUFDMUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQWEsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQWEsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQzFDO0FBRUQ7SUFDQyxJQUFJLEtBQUssU0FBVyxDQUFDO0lBQ3JCLElBQUksR0FBRyxTQUFRLENBQUM7SUFDaEIsSUFBSSxLQUFLLFNBQVksQ0FBQztJQUN0QixJQUFJLEdBQUcsU0FBaUIsQ0FBQztJQUN6QixJQUFJLEVBQUUsU0FBbUIsQ0FBQztJQUMxQixJQUFJLE1BQU0sU0FBUyxDQUFDO0lBQ3BCLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFhLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBYSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFhLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFhLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDL0M7QUFFRDtJQUNDLElBQUksS0FBSyxTQUFXLENBQUM7SUFDckIsSUFBSSxJQUFJLFNBQW1CLENBQUM7SUFDNUIsSUFBSSxFQUFFLFNBQWtCLENBQUM7SUFDekIsSUFBSSxNQUFNLFNBQVEsQ0FBQztJQUNuQixNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDN0I7QUFFRDtJQUNDLElBQUksS0FBSyxTQUFXLENBQUM7SUFDckIsSUFBSSxHQUFHLFNBQVEsQ0FBQztJQUNoQixJQUFJLEdBQUcsU0FBUSxDQUFDO0lBQ2hCLElBQUksRUFBRSxTQUFtQixDQUFDO0lBQzFCLElBQUksTUFBTSxTQUFTLENBQUM7SUFDcEIsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQzVCO0FBRUQ7SUFDQyxJQUFJLEtBQUssU0FBVyxDQUFDO0lBQ3JCLElBQUksRUFBRSxTQUFvQixDQUFDO0lBQzNCLElBQUksTUFBTSxTQUFVLENBQUM7SUFDckIsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN4QjtBQUVEO0lBQ0MsSUFBSSxLQUFLLFNBQVcsQ0FBQztJQUNyQixJQUFJLE1BQU0sU0FBTyxDQUFDO0lBQ2xCLE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDMUI7QUFFRDtJQUNDLElBQUksS0FBSyxTQUFXLENBQUM7SUFDckIsSUFBSSxFQUFFLFNBQW1CLENBQUM7SUFDMUIsSUFBSSxHQUFHLFNBQVEsQ0FBQztJQUNoQixJQUFJLE1BQU0sU0FBUSxDQUFDO0lBQ25CLElBQUksT0FBTyxTQUFvQixDQUFDO0lBQ2hDLElBQUksT0FBTyxTQUFTLENBQUM7SUFDckIsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ2hDO0FBRUQsbURBQW1EO0FBQ25EO0lBQ0MsSUFBSSxLQUFLLFNBQVcsQ0FBQztJQUNyQixJQUFJLE1BQU0sU0FBTSxDQUFDO0lBQ2pCLE1BQU0sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDMUI7QUFFRDtJQUNDLElBQUksS0FBSyxTQUFXLENBQUM7SUFDckIsSUFBSSxNQUFNLFNBQU0sQ0FBQztJQUNqQixNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3ZCO0FBQ0QsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgTm9kZUNhY2hlID0gcmVxdWlyZSgnLi4vLi4vJyk7XG5cbmltcG9ydCBPcHRpb25zID0gTm9kZUNhY2hlLk9wdGlvbnM7XG5pbXBvcnQgU3RhdHMgPSBOb2RlQ2FjaGUuU3RhdHM7XG5pbXBvcnQgQ2FsbGJhY2sgPSBOb2RlQ2FjaGUuQ2FsbGJhY2s7XG5cbmludGVyZmFjZSBUeXBlU2FtcGxlIHtcblx0YTogbnVtYmVyO1xuXHRiOiBzdHJpbmc7XG5cdGM6IGJvb2xlYW47XG59XG5cbntcblx0bGV0IG9wdGlvbnM6IE9wdGlvbnM7XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlLk5vZGVDYWNoZTtcblx0Y2FjaGUgPSBuZXcgTm9kZUNhY2hlKCk7XG5cdGNhY2hlID0gbmV3IE5vZGVDYWNoZShvcHRpb25zKTtcbn1cblxue1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZTtcblx0bGV0IGtleTogc3RyaW5nO1xuXHRsZXQgY2I6IENhbGxiYWNrPFR5cGVTYW1wbGU+O1xuXHRsZXQgcmVzdWx0OiBUeXBlU2FtcGxlIHwgdW5kZWZpbmVkO1xuXHRyZXN1bHQgPSBjYWNoZS5nZXQ8VHlwZVNhbXBsZT4oa2V5KTtcblx0cmVzdWx0ID0gY2FjaGUuZ2V0PFR5cGVTYW1wbGU+KGtleSwgY2IpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQga2V5czogc3RyaW5nW107XG5cdGxldCBjYjogQ2FsbGJhY2s8eyBba2V5OiBzdHJpbmddOiBUeXBlU2FtcGxlIH0+O1xuXHRsZXQgcmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IFR5cGVTYW1wbGUgfTtcblx0cmVzdWx0ID0gY2FjaGUubWdldDxUeXBlU2FtcGxlPihrZXlzKTtcblx0cmVzdWx0ID0gY2FjaGUubWdldDxUeXBlU2FtcGxlPihrZXlzLCBjYik7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCBrZXk6IHN0cmluZztcblx0bGV0IHZhbHVlOiBUeXBlU2FtcGxlO1xuXHRsZXQgdHRsOiBudW1iZXIgfCBzdHJpbmc7XG5cdGxldCBjYjogQ2FsbGJhY2s8Ym9vbGVhbj47XG5cdGxldCByZXN1bHQ6IGJvb2xlYW47XG5cdHJlc3VsdCA9IGNhY2hlLnNldDxUeXBlU2FtcGxlPihrZXksIHZhbHVlKTtcblx0cmVzdWx0ID0gY2FjaGUuc2V0PFR5cGVTYW1wbGU+KGtleSwgdmFsdWUsIHR0bCk7XG5cdHJlc3VsdCA9IGNhY2hlLnNldDxUeXBlU2FtcGxlPihrZXksIHZhbHVlLCB0dGwsIGNiKTtcblx0cmVzdWx0ID0gY2FjaGUuc2V0PFR5cGVTYW1wbGU+KGtleSwgdmFsdWUsIGNiKTtcbn1cblxue1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZTtcblx0bGV0IGtleXM6IHN0cmluZyB8IHN0cmluZ1tdO1xuXHRsZXQgY2I6IENhbGxiYWNrPG51bWJlcj47XG5cdGxldCByZXN1bHQ6IG51bWJlcjtcblx0cmVzdWx0ID0gY2FjaGUuZGVsKGtleXMpO1xuXHRyZXN1bHQgPSBjYWNoZS5kZWwoa2V5cywgY2IpO1xufVxuXG57XG5cdGxldCBjYWNoZTogTm9kZUNhY2hlO1xuXHRsZXQga2V5OiBzdHJpbmc7XG5cdGxldCB0dGw6IG51bWJlcjtcblx0bGV0IGNiOiBDYWxsYmFjazxib29sZWFuPjtcblx0bGV0IHJlc3VsdDogYm9vbGVhbjtcblx0cmVzdWx0ID0gY2FjaGUudHRsKGtleSk7XG5cdHJlc3VsdCA9IGNhY2hlLnR0bChrZXksIHR0bCk7XG5cdHJlc3VsdCA9IGNhY2hlLnR0bChrZXksIHR0bCwgY2IpO1xuXHRyZXN1bHQgPSBjYWNoZS50dGwoa2V5LCBjYik7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCBjYjogQ2FsbGJhY2s8c3RyaW5nW10+O1xuXHRsZXQgcmVzdWx0OiBzdHJpbmdbXTtcblx0cmVzdWx0ID0gY2FjaGUua2V5cygpO1xuXHRyZXN1bHQgPSBjYWNoZS5rZXlzKGNiKTtcbn1cblxue1xuXHRsZXQgY2FjaGU6IE5vZGVDYWNoZTtcblx0bGV0IHJlc3VsdDogU3RhdHM7XG5cdHJlc3VsdCA9IGNhY2hlLmdldFN0YXRzKCk7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCBjYjogQ2FsbGJhY2s8Qm9vbGVhbj47XG5cdGxldCBrZXk6IHN0cmluZztcblx0bGV0IG51bWJlcjogbnVtYmVyO1xuXHRsZXQgcmVzdWx0MTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXHRsZXQgcmVzdWx0MjogQm9vbGVhbjtcblx0cmVzdWx0MSA9IGNhY2hlLmdldFR0bChrZXkpO1xuXHRyZXN1bHQyID0gY2FjaGUuZ2V0VHRsKGtleSwgY2IpO1xufVxuXG4vKiB0c2xpbnQ6ZGlzYWJsZSB2b2lkLXJldHVybiBuby12b2lkLWV4cHJlc3Npb24gKi9cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCByZXN1bHQ6IHZvaWQ7XG5cdHJlc3VsdCA9IGNhY2hlLmZsdXNoQWxsKCk7XG59XG5cbntcblx0bGV0IGNhY2hlOiBOb2RlQ2FjaGU7XG5cdGxldCByZXN1bHQ6IHZvaWQ7XG5cdHJlc3VsdCA9IGNhY2hlLmNsb3NlKCk7XG59XG4vKiB0c2xpbnQ6ZW5hYmxlIHZvaWQtcmV0dXJuICovXG4iXX0=