/// <reference path="./disposables/disposable.ts" />
/// <reference path="./checkedobserver.ts" />
/// <reference path="./notification.ts" />
(function () {
    var observer;
    var n = observer.toNotifier();
    var o = observer.asObserver();
    var c = observer.checked();
    o = observer.notifyOn(Rx.Scheduler.immediate);
    var so = Rx.Observer.fromNotifier(function (n) {
        // Handle next calls
        if (n.kind === 'N') {
            console.log('Next: ' + n.value);
        }
        // Handle error calls
        if (n.kind === 'E') {
            console.log('Error: ' + n.exception);
        }
        // Handle completed
        if (n.kind === 'C') {
            console.log('Completed');
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2ZXItZXh0cmFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm1zL2lvcy9idWlsZC9EZWJ1Zy1pcGhvbmVzaW11bGF0b3IvQ2hhdHZlcnNpdHlBcHAuYXBwL2FwcC90bnNfbW9kdWxlcy9yeC90cy9jb3JlL29ic2VydmVyLWV4dHJhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvREFBb0Q7QUFDcEQsNkNBQTZDO0FBQzdDLDBDQUEwQztBQTRDMUMsQ0FBQztJQUNHLElBQUksUUFBOEIsQ0FBQztJQUNuQyxJQUFJLENBQUMsR0FBcUQsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRWhGLElBQUksQ0FBQyxHQUF5QixRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFcEQsSUFBSSxDQUFDLEdBQWdDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV4RCxDQUFDLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlDLElBQUksRUFBRSxHQUF5QixFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBUyxVQUFDLENBQUM7UUFDOUQsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBRUQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsbUJBQW1CO1FBQ25CLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtTQUMzQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9kaXNwb3NhYmxlcy9kaXNwb3NhYmxlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2NoZWNrZWRvYnNlcnZlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9ub3RpZmljYXRpb24udHNcIiAvPlxubW9kdWxlIFJ4IHtcblx0ZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlcjxUPiB7XG4gICAgICAgIC8qKlxuICAgICAgICAqICBDcmVhdGVzIGEgbm90aWZpY2F0aW9uIGNhbGxiYWNrIGZyb20gYW4gb2JzZXJ2ZXIuXG4gICAgICAgICogQHJldHVybnMgVGhlIGFjdGlvbiB0aGF0IGZvcndhcmRzIGl0cyBpbnB1dCBub3RpZmljYXRpb24gdG8gdGhlIHVuZGVybHlpbmcgb2JzZXJ2ZXIuXG4gICAgICAgICovXG5cdFx0dG9Ob3RpZmllcigpOiAobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb248VD4pID0+IHZvaWQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIEhpZGVzIHRoZSBpZGVudGl0eSBvZiBhbiBvYnNlcnZlci5cbiAgICAgICAgKiBAcmV0dXJucyBBbiBvYnNlcnZlciB0aGF0IGhpZGVzIHRoZSBpZGVudGl0eSBvZiB0aGUgc3BlY2lmaWVkIG9ic2VydmVyLlxuICAgICAgICAqL1xuXHRcdGFzT2JzZXJ2ZXIoKTogT2JzZXJ2ZXI8VD47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIENoZWNrcyBhY2Nlc3MgdG8gdGhlIG9ic2VydmVyIGZvciBncmFtbWFyIHZpb2xhdGlvbnMuIFRoaXMgaW5jbHVkZXMgY2hlY2tpbmcgZm9yIG11bHRpcGxlIE9uRXJyb3Igb3IgT25Db21wbGV0ZWQgY2FsbHMsIGFzIHdlbGwgYXMgcmVlbnRyYW5jeSBpbiBhbnkgb2YgdGhlIG9ic2VydmVyIG1ldGhvZHMuXG4gICAgICAgICogIElmIGEgdmlvbGF0aW9uIGlzIGRldGVjdGVkLCBhbiBFcnJvciBpcyB0aHJvd24gZnJvbSB0aGUgb2ZmZW5kaW5nIG9ic2VydmVyIG1ldGhvZCBjYWxsLlxuICAgICAgICAqIEByZXR1cm5zIEFuIG9ic2VydmVyIHRoYXQgY2hlY2tzIGNhbGxiYWNrcyBpbnZvY2F0aW9ucyBhZ2FpbnN0IHRoZSBvYnNlcnZlciBncmFtbWFyIGFuZCwgaWYgdGhlIGNoZWNrcyBwYXNzLCBmb3J3YXJkcyB0aG9zZSB0byB0aGUgc3BlY2lmaWVkIG9ic2VydmVyLlxuICAgICAgICAqL1xuICAgICAgICBjaGVja2VkKCk6IENoZWNrZWRPYnNlcnZlcjxUPjtcblxuICAgICAgICAvKipcbiAgICAgICAgKiBTY2hlZHVsZXMgdGhlIGludm9jYXRpb24gb2Ygb2JzZXJ2ZXIgbWV0aG9kcyBvbiB0aGUgZ2l2ZW4gc2NoZWR1bGVyLlxuICAgICAgICAqIEBwYXJhbSB7U2NoZWR1bGVyfSBzY2hlZHVsZXIgU2NoZWR1bGVyIHRvIHNjaGVkdWxlIG9ic2VydmVyIG1lc3NhZ2VzIG9uLlxuICAgICAgICAqIEByZXR1cm5zIHtPYnNlcnZlcn0gT2JzZXJ2ZXIgd2hvc2UgbWVzc2FnZXMgYXJlIHNjaGVkdWxlZCBvbiB0aGUgZ2l2ZW4gc2NoZWR1bGVyLlxuICAgICAgICAqL1xuICAgICAgICBub3RpZnlPbihzY2hlZHVsZXI6IElTY2hlZHVsZXIpOiBPYnNlcnZlcjxUPjtcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZXJTdGF0aWMge1xuICAgICAgICAvKipcbiAgICAgICAgKiAgQ3JlYXRlcyBhbiBvYnNlcnZlciBmcm9tIGEgbm90aWZpY2F0aW9uIGNhbGxiYWNrLlxuICAgICAgICAqXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBtZW1iZXJPZiBPYnNlcnZlclxuICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgQWN0aW9uIHRoYXQgaGFuZGxlcyBhIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgKiBAcmV0dXJucyBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHRoYXQgaW52b2tlcyB0aGUgc3BlY2lmaWVkIGhhbmRsZXIgdXNpbmcgYSBub3RpZmljYXRpb24gY29ycmVzcG9uZGluZyB0byBlYWNoIG1lc3NhZ2UgaXQgcmVjZWl2ZXMuXG4gICAgICAgICovXG5cdFx0ZnJvbU5vdGlmaWVyPFQ+KGhhbmRsZXI6IChub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbjxUPiwgdGhpc0FyZz86IGFueSkgPT4gdm9pZCk6IE9ic2VydmVyPFQ+O1xuXHR9XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYnNlcnZlcjogUnguT2JzZXJ2ZXI8Ym9vbGVhbj47XG4gICAgdmFyIG46IChub3RpZmljYXRpb246IFJ4Lk5vdGlmaWNhdGlvbjxib29sZWFuPikgPT4gdm9pZCA9IG9ic2VydmVyLnRvTm90aWZpZXIoKTtcblxuICAgIHZhciBvOiBSeC5PYnNlcnZlcjxib29sZWFuPiA9IG9ic2VydmVyLmFzT2JzZXJ2ZXIoKTtcblxuICAgIHZhciBjOiBSeC5DaGVja2VkT2JzZXJ2ZXI8Ym9vbGVhbj4gPSBvYnNlcnZlci5jaGVja2VkKCk7XG5cbiAgICBvID0gb2JzZXJ2ZXIubm90aWZ5T24oUnguU2NoZWR1bGVyLmltbWVkaWF0ZSk7XG5cbiAgICB2YXIgc28gOiBSeC5PYnNlcnZlcjxudW1iZXI+ID0gUnguT2JzZXJ2ZXIuZnJvbU5vdGlmaWVyPG51bWJlcj4oKG4pID0+IHtcbiAgICAgICAgLy8gSGFuZGxlIG5leHQgY2FsbHNcbiAgICAgICAgaWYgKG4ua2luZCA9PT0gJ04nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTmV4dDogJyArIG4udmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGVycm9yIGNhbGxzXG4gICAgICAgIGlmIChuLmtpbmQgPT09ICdFJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOiAnICsgbi5leGNlcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGNvbXBsZXRlZFxuICAgICAgICBpZiAobi5raW5kID09PSAnQycpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb21wbGV0ZWQnKVxuICAgICAgICB9XG4gICAgfSk7XG59KTtcbiJdfQ==