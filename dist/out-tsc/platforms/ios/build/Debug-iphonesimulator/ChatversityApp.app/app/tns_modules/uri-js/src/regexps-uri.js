"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
function buildExps(isIRI) {
    var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$ = util_1.merge(DIGIT$$, "[A-Fa-f]"), //case-insensitive
    LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$ = util_1.subexp(util_1.subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + util_1.subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + util_1.subexp("%" + HEXDIG$$ + HEXDIG$$)), //expanded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = util_1.merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", //subset, excludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]", //subset
    UNRESERVED$$ = util_1.merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = util_1.subexp(ALPHA$$ + util_1.merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = util_1.subexp(util_1.subexp(PCT_ENCODED$ + "|" + util_1.merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = util_1.subexp(util_1.subexp("25[0-5]") + "|" + util_1.subexp("2[0-4]" + DIGIT$$) + "|" + util_1.subexp("1" + DIGIT$$ + DIGIT$$) + "|" + util_1.subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = util_1.subexp(util_1.subexp("25[0-5]") + "|" + util_1.subexp("2[0-4]" + DIGIT$$) + "|" + util_1.subexp("1" + DIGIT$$ + DIGIT$$) + "|" + util_1.subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), //relaxed parsing rules
    IPV4ADDRESS$ = util_1.subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = util_1.subexp(HEXDIG$$ + "{1,4}"), LS32$ = util_1.subexp(util_1.subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = util_1.subexp(util_1.subexp(H16$ + "\\:") + "{6}" + LS32$), //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = util_1.subexp("\\:\\:" + util_1.subexp(H16$ + "\\:") + "{5}" + LS32$), //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = util_1.subexp(util_1.subexp(H16$) + "?\\:\\:" + util_1.subexp(H16$ + "\\:") + "{4}" + LS32$), //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + util_1.subexp(H16$ + "\\:") + "{3}" + LS32$), //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + util_1.subexp(H16$ + "\\:") + "{2}" + LS32$), //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = util_1.subexp(util_1.subexp(util_1.subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = util_1.subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = util_1.subexp(util_1.subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"), //RFC 6874
    IPV6ADDRZ$ = util_1.subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), //RFC 6874
    IPV6ADDRZ_RELAXED$ = util_1.subexp(IPV6ADDRESS$ + util_1.subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$), //RFC 6874, with relaxed parsing rules
    IPVFUTURE$ = util_1.subexp("[vV]" + HEXDIG$$ + "+\\." + util_1.merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = util_1.subexp("\\[" + util_1.subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), //RFC 6874
    REG_NAME$ = util_1.subexp(util_1.subexp(PCT_ENCODED$ + "|" + util_1.merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"), HOST$ = util_1.subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$), PORT$ = util_1.subexp(DIGIT$$ + "*"), AUTHORITY$ = util_1.subexp(util_1.subexp(USERINFO$ + "@") + "?" + HOST$ + util_1.subexp("\\:" + PORT$) + "?"), PCHAR$ = util_1.subexp(PCT_ENCODED$ + "|" + util_1.merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = util_1.subexp(PCHAR$ + "*"), SEGMENT_NZ$ = util_1.subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = util_1.subexp(util_1.subexp(PCT_ENCODED$ + "|" + util_1.merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = util_1.subexp(util_1.subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = util_1.subexp("\\/" + util_1.subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), //simplified
    PATH_NOSCHEME$ = util_1.subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), //simplified
    PATH_ROOTLESS$ = util_1.subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = util_1.subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = util_1.subexp(util_1.subexp(PCHAR$ + "|" + util_1.merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = util_1.subexp(util_1.subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = util_1.subexp(util_1.subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = util_1.subexp(SCHEME$ + "\\:" + HIER_PART$ + util_1.subexp("\\?" + QUERY$) + "?" + util_1.subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = util_1.subexp(util_1.subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = util_1.subexp(RELATIVE_PART$ + util_1.subexp("\\?" + QUERY$) + "?" + util_1.subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = util_1.subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = util_1.subexp(SCHEME$ + "\\:" + HIER_PART$ + util_1.subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + util_1.subexp(util_1.subexp("\\/\\/(" + util_1.subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + util_1.subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + util_1.subexp("\\?(" + QUERY$ + ")") + "?" + util_1.subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + util_1.subexp(util_1.subexp("\\/\\/(" + util_1.subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + util_1.subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + util_1.subexp("\\?(" + QUERY$ + ")") + "?" + util_1.subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + util_1.subexp(util_1.subexp("\\/\\/(" + util_1.subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + util_1.subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + util_1.subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + util_1.subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + util_1.subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + util_1.subexp("\\:(" + PORT$ + ")") + "?$";
    return {
        NOT_SCHEME: new RegExp(util_1.merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(util_1.merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(util_1.merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(util_1.merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(util_1.merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(util_1.merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(util_1.merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(util_1.merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
        OTHER_CHARS: new RegExp(util_1.merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + util_1.subexp(util_1.subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
    };
}
exports.buildExps = buildExps;
exports.default = buildExps(false);
//# sourceMappingURL=data:application/json;base64,