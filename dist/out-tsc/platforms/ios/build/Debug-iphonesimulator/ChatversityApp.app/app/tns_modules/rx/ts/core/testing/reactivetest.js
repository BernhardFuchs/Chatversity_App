/// <reference path="./subscription.ts" />
/// <reference path="./recorded.ts" />
var Rx;
(function (Rx) {
})(Rx || (Rx = {}));
(function () {
    var n = Rx.ReactiveTest.created;
    var n = Rx.ReactiveTest.subscribed;
    var n = Rx.ReactiveTest.disposed;
    var r = Rx.ReactiveTest.onNext(100, 'abc');
    var r = Rx.ReactiveTest.onNext(100, function (v) { return false; });
    var r = Rx.ReactiveTest.onError(100, new Error('abc'));
    var r = Rx.ReactiveTest.onError(100, function (v) { return true; });
    var r = Rx.ReactiveTest.onCompleted(100);
    var s = Rx.ReactiveTest.subscribe(100);
    var s = Rx.ReactiveTest.subscribe(100, 200);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmV0ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm1zL2lvcy9idWlsZC9EZWJ1Zy1pcGhvbmVzaW11bGF0b3IvQ2hhdHZlcnNpdHlBcHAuYXBwL2FwcC90bnNfbW9kdWxlcy9yeC90cy9jb3JlL3Rlc3RpbmcvcmVhY3RpdmV0ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBDQUEwQztBQUMxQyxzQ0FBc0M7QUFFdEMsSUFBTyxFQUFFLENBc0VSO0FBdEVELFdBQU8sRUFBRTtBQXNFVCxDQUFDLEVBdEVNLEVBQUUsS0FBRixFQUFFLFFBc0VSO0FBRUQsQ0FBQztJQUNHLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQzVDLElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBRTFDLElBQUksQ0FBQyxHQUFpQixFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekQsSUFBSSxDQUFDLEdBQWlCLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsR0FBaUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckUsSUFBSSxDQUFDLEdBQWlCLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxVQUFDLENBQU0sSUFBSyxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsR0FBaUIsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFdkQsSUFBSSxDQUFDLEdBQXFCLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxHQUFxQixFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9zdWJzY3JpcHRpb24udHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vcmVjb3JkZWQudHNcIiAvPlxuXG5tb2R1bGUgUngge1xuICAgIGV4cG9ydCB2YXIgUmVhY3RpdmVUZXN0OiB7XG4gICAgICAgIC8qKiBEZWZhdWx0IHZpcnR1YWwgdGltZSB1c2VkIGZvciBjcmVhdGlvbiBvZiBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbiB1bml0IHRlc3RzLiAqL1xuICAgICAgICBjcmVhdGVkOiBudW1iZXI7XG4gICAgICAgIC8qKiBEZWZhdWx0IHZpcnR1YWwgdGltZSB1c2VkIHRvIHN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbiB1bml0IHRlc3RzLiAqL1xuICAgICAgICBzdWJzY3JpYmVkOiBudW1iZXI7XG4gICAgICAgIC8qKiBEZWZhdWx0IHZpcnR1YWwgdGltZSB1c2VkIHRvIGRpc3Bvc2Ugc3Vic2NyaXB0aW9ucyBpbiB1bml0IHRlc3RzLiAqL1xuICAgICAgICBkaXNwb3NlZDogbnVtYmVyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgYW4gT25OZXh0IG5vdGlmaWNhdGlvbiByZWNvcmQgYXQgYSBnaXZlbiB0aW1lIHdpdGggYSBnaXZlbiB2YWx1ZSBvciBhIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogMSAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCA0Mik7XG4gICAgICAgICAqIDIgLSBSZWFjdGl2ZVRlc3Qub25OZXh0KDIwMCwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubGVuZ3RoID09IDI7IH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGlja3MgUmVjb3JkZWQgdmlydHVhbCB0aW1lIHRoZSBPbk5leHQgbm90aWZpY2F0aW9uIG9jY3Vycy5cbiAgICAgICAgICogQHBhcmFtIHZhbHVlIFJlY29yZGVkIHZhbHVlIHN0b3JlZCBpbiB0aGUgT25OZXh0IG5vdGlmaWNhdGlvbiBvciBhIHByZWRpY2F0ZS5cbiAgICAgICAgICogQHJldHVybiBSZWNvcmRlZCBPbk5leHQgbm90aWZpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb25OZXh0KHRpY2tzOiBudW1iZXIsIHZhbHVlOiBhbnkpOiBSZWNvcmRlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhY3RvcnkgbWV0aG9kIGZvciBhbiBPbk5leHQgbm90aWZpY2F0aW9uIHJlY29yZCBhdCBhIGdpdmVuIHRpbWUgd2l0aCBhIGdpdmVuIHZhbHVlIG9yIGEgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiAxIC0gUmVhY3RpdmVUZXN0Lm9uTmV4dCgyMDAsIDQyKTtcbiAgICAgICAgICogMiAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5sZW5ndGggPT0gMjsgfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aWNrcyBSZWNvcmRlZCB2aXJ0dWFsIHRpbWUgdGhlIE9uTmV4dCBub3RpZmljYXRpb24gb2NjdXJzLlxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgUmVjb3JkZWQgdmFsdWUgc3RvcmVkIGluIHRoZSBPbk5leHQgbm90aWZpY2F0aW9uIG9yIGEgcHJlZGljYXRlLlxuICAgICAgICAgKiBAcmV0dXJuIFJlY29yZGVkIE9uTmV4dCBub3RpZmljYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBvbk5leHQodGlja3M6IG51bWJlciwgcHJlZGljYXRlOiAodmFsdWU6IGFueSkgPT4gYm9vbGVhbik6IFJlY29yZGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmFjdG9yeSBtZXRob2QgZm9yIGFuIE9uRXJyb3Igbm90aWZpY2F0aW9uIHJlY29yZCBhdCBhIGdpdmVuIHRpbWUgd2l0aCBhIGdpdmVuIGVycm9yLlxuICAgICAgICAgKlxuICAgICAgICAgKiAxIC0gUmVhY3RpdmVUZXN0Lm9uTmV4dCgyMDAsIG5ldyBFcnJvcignZXJyb3InKSk7XG4gICAgICAgICAqIDIgLSBSZWFjdGl2ZVRlc3Qub25OZXh0KDIwMCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubWVzc2FnZSA9PT0gJ2Vycm9yJzsgfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aWNrcyBSZWNvcmRlZCB2aXJ0dWFsIHRpbWUgdGhlIE9uRXJyb3Igbm90aWZpY2F0aW9uIG9jY3Vycy5cbiAgICAgICAgICogQHBhcmFtIGV4Y2VwdGlvbiBSZWNvcmRlZCBleGNlcHRpb24gc3RvcmVkIGluIHRoZSBPbkVycm9yIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgICogQHJldHVybiBSZWNvcmRlZCBPbkVycm9yIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIG9uRXJyb3IodGlja3M6IG51bWJlciwgZXhjZXB0aW9uOiBhbnkpOiBSZWNvcmRlZDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZhY3RvcnkgbWV0aG9kIGZvciBhbiBPbkVycm9yIG5vdGlmaWNhdGlvbiByZWNvcmQgYXQgYSBnaXZlbiB0aW1lIHdpdGggYSBnaXZlbiBlcnJvci5cbiAgICAgICAgICpcbiAgICAgICAgICogMSAtIFJlYWN0aXZlVGVzdC5vbk5leHQoMjAwLCBuZXcgRXJyb3IoJ2Vycm9yJykpO1xuICAgICAgICAgKiAyIC0gUmVhY3RpdmVUZXN0Lm9uTmV4dCgyMDAsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm1lc3NhZ2UgPT09ICdlcnJvcic7IH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGlja3MgUmVjb3JkZWQgdmlydHVhbCB0aW1lIHRoZSBPbkVycm9yIG5vdGlmaWNhdGlvbiBvY2N1cnMuXG4gICAgICAgICAqIEBwYXJhbSBleGNlcHRpb24gUmVjb3JkZWQgZXhjZXB0aW9uIHN0b3JlZCBpbiB0aGUgT25FcnJvciBub3RpZmljYXRpb24uXG4gICAgICAgICAqIEByZXR1cm4gUmVjb3JkZWQgT25FcnJvciBub3RpZmljYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBvbkVycm9yKHRpY2tzOiBudW1iZXIsIHByZWRpY2F0ZTogKGV4Y2VwdGlvbjogYW55KSA9PiBib29sZWFuKTogUmVjb3JkZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgYW4gT25Db21wbGV0ZWQgbm90aWZpY2F0aW9uIHJlY29yZCBhdCBhIGdpdmVuIHRpbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aWNrcyBSZWNvcmRlZCB2aXJ0dWFsIHRpbWUgdGhlIE9uQ29tcGxldGVkIG5vdGlmaWNhdGlvbiBvY2N1cnMuXG4gICAgICAgICAqIEByZXR1cm4gUmVjb3JkZWQgT25Db21wbGV0ZWQgbm90aWZpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgb25Db21wbGV0ZWQodGlja3M6IG51bWJlcik6IFJlY29yZGVkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb3IgYSBzdWJzY3JpcHRpb24gcmVjb3JkIGJhc2VkIG9uIGEgZ2l2ZW4gc3Vic2NyaXB0aW9uIGFuZCBkaXNwb3NhbCB0aW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc3RhcnQgVmlydHVhbCB0aW1lIGluZGljYXRpbmcgd2hlbiB0aGUgc3Vic2NyaXB0aW9uIHdhcyBjcmVhdGVkLlxuICAgICAgICAgKiBAcGFyYW0gZW5kIFZpcnR1YWwgdGltZSBpbmRpY2F0aW5nIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiB3YXMgZGlzcG9zZWQuXG4gICAgICAgICAqIEByZXR1cm4gU3Vic2NyaXB0aW9uIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHN1YnNjcmliZShzdWJzY3JpYmVBdDogbnVtYmVyLCB1bnN1YnNjcmliZUF0PzogbnVtYmVyKTogU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBuIDogbnVtYmVyID0gUnguUmVhY3RpdmVUZXN0LmNyZWF0ZWQ7XG4gICAgdmFyIG4gOiBudW1iZXIgPSBSeC5SZWFjdGl2ZVRlc3Quc3Vic2NyaWJlZDtcbiAgICB2YXIgbiA6IG51bWJlciA9IFJ4LlJlYWN0aXZlVGVzdC5kaXNwb3NlZDtcblxuICAgIHZhciByIDogUnguUmVjb3JkZWQgPSBSeC5SZWFjdGl2ZVRlc3Qub25OZXh0KDEwMCwgJ2FiYycpO1xuICAgIHZhciByIDogUnguUmVjb3JkZWQgPSBSeC5SZWFjdGl2ZVRlc3Qub25OZXh0KDEwMCwgKHY6IGFueSkgPT4gZmFsc2UpO1xuICAgIHZhciByIDogUnguUmVjb3JkZWQgPSBSeC5SZWFjdGl2ZVRlc3Qub25FcnJvcigxMDAsIG5ldyBFcnJvcignYWJjJykpO1xuICAgIHZhciByIDogUnguUmVjb3JkZWQgPSBSeC5SZWFjdGl2ZVRlc3Qub25FcnJvcigxMDAsICh2OiBhbnkpID0+IHRydWUpO1xuICAgIHZhciByIDogUnguUmVjb3JkZWQgPSBSeC5SZWFjdGl2ZVRlc3Qub25Db21wbGV0ZWQoMTAwKTtcblxuICAgIHZhciBzIDogUnguU3Vic2NyaXB0aW9uID0gUnguUmVhY3RpdmVUZXN0LnN1YnNjcmliZSgxMDApO1xuICAgIHZhciBzIDogUnguU3Vic2NyaXB0aW9uID0gUnguUmVhY3RpdmVUZXN0LnN1YnNjcmliZSgxMDAsIDIwMCk7XG59KTtcbiJdfQ==