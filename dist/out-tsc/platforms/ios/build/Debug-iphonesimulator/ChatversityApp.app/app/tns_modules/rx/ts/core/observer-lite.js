/// <reference path="./disposables/disposable.ts" />
/// <reference path="./checkedobserver.ts" />
var Rx;
(function (Rx) {
})(Rx || (Rx = {}));
(function () {
    var iobserver;
    var observer;
    iobserver.onNext(false);
    iobserver.onError(new Error('a'));
    iobserver.onCompleted();
    observer.onNext(false);
    observer.onError(new Error('a'));
    observer.onCompleted();
    var so = Rx.Observer.create(function (v) { return 1; });
    so = Rx.Observer.create(function (v) { return 1; }, function (e) { });
    so = Rx.Observer.create(function (v) { return 1; }, function (e) { }, function () { });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2ZXItbGl0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsYXRmb3Jtcy9pb3MvYnVpbGQvRGVidWctaXBob25lc2ltdWxhdG9yL0NoYXR2ZXJzaXR5QXBwLmFwcC9hcHAvdG5zX21vZHVsZXMvcngvdHMvY29yZS9vYnNlcnZlci1saXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUNwRCw2Q0FBNkM7QUFDN0MsSUFBTyxFQUFFLENBcURSO0FBckRELFdBQU8sRUFBRTtBQXFEVCxDQUFDLEVBckRNLEVBQUUsS0FBRixFQUFFLFFBcURSO0FBR0QsQ0FBQztJQUNHLElBQUksU0FBZ0MsQ0FBQztJQUNyQyxJQUFJLFFBQThCLENBQUM7SUFFbkMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXhCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUV2QixJQUFJLEVBQUUsR0FBd0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUM7SUFDM0QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxFQUFELENBQUMsRUFBRSxVQUFDLENBQUMsSUFBTyxDQUFDLENBQUMsQ0FBQztJQUM5QyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEVBQUQsQ0FBQyxFQUFFLFVBQUMsQ0FBQyxJQUFPLENBQUMsRUFBRSxjQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZGlzcG9zYWJsZXMvZGlzcG9zYWJsZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9jaGVja2Vkb2JzZXJ2ZXIudHNcIiAvPlxubW9kdWxlIFJ4IHtcbiAgICAvKipcbiAgICAqIFN1cHBvcnRzIHB1c2gtc3R5bGUgaXRlcmF0aW9uIG92ZXIgYW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZS5cbiAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyPFQ+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICogTm90aWZpZXMgdGhlIG9ic2VydmVyIG9mIGEgbmV3IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlLlxuICAgICAgICAqIEBwYXJhbSB7QW55fSB2YWx1ZSBOZXh0IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlLlxuICAgICAgICAqL1xuICAgICAgICBvbk5leHQodmFsdWU6IFQpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgKiBOb3RpZmllcyB0aGUgb2JzZXJ2ZXIgdGhhdCBhbiBleGNlcHRpb24gaGFzIG9jY3VycmVkLlxuICAgICAgICAqIEBwYXJhbSB7QW55fSBlcnJvciBUaGUgZXJyb3IgdGhhdCBoYXMgb2NjdXJyZWQuXG4gICAgICAgICovXG4gICAgICAgIG9uRXJyb3IoZXhjZXB0aW9uOiBhbnkpOiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgKiBOb3RpZmllcyB0aGUgb2JzZXJ2ZXIgb2YgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UuXG4gICAgICAgICovXG4gICAgICAgIG9uQ29tcGxldGVkKCk6IHZvaWQ7XG4gICAgfVxuICAgIFxuICAgIGV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZXI8VD4ge1xuICAgICAgICAvKipcbiAgICAgICAgKiBOb3RpZmllcyB0aGUgb2JzZXJ2ZXIgb2YgYSBuZXcgZWxlbWVudCBpbiB0aGUgc2VxdWVuY2UuXG4gICAgICAgICogQHBhcmFtIHtBbnl9IHZhbHVlIE5leHQgZWxlbWVudCBpbiB0aGUgc2VxdWVuY2UuXG4gICAgICAgICovXG4gICAgICAgIG9uTmV4dCh2YWx1ZTogVCk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAqIE5vdGlmaWVzIHRoZSBvYnNlcnZlciB0aGF0IGFuIGV4Y2VwdGlvbiBoYXMgb2NjdXJyZWQuXG4gICAgICAgICogQHBhcmFtIHtBbnl9IGVycm9yIFRoZSBlcnJvciB0aGF0IGhhcyBvY2N1cnJlZC5cbiAgICAgICAgKi9cbiAgICAgICAgb25FcnJvcihleGNlcHRpb246IGFueSk6IHZvaWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAqIE5vdGlmaWVzIHRoZSBvYnNlcnZlciBvZiB0aGUgZW5kIG9mIHRoZSBzZXF1ZW5jZS5cbiAgICAgICAgKi9cbiAgICAgICAgb25Db21wbGV0ZWQoKTogdm9pZDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIE9ic2VydmVyU3RhdGljIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogIENyZWF0ZXMgYW4gb2JzZXJ2ZXIgZnJvbSB0aGUgc3BlY2lmaWVkIE9uTmV4dCwgYWxvbmcgd2l0aCBvcHRpb25hbCBPbkVycm9yLCBhbmQgT25Db21wbGV0ZWQgYWN0aW9ucy5cbiAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25OZXh0XSBPYnNlcnZlcidzIE9uTmV4dCBhY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uRXJyb3JdIE9ic2VydmVyJ3MgT25FcnJvciBhY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ29tcGxldGVkXSBPYnNlcnZlcidzIE9uQ29tcGxldGVkIGFjdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgKiBAcmV0dXJucyB7T2JzZXJ2ZXJ9IFRoZSBvYnNlcnZlciBvYmplY3QgaW1wbGVtZW50ZWQgdXNpbmcgdGhlIGdpdmVuIGFjdGlvbnMuXG4gICAgICAgICovXG4gICAgICAgIGNyZWF0ZTxUPihvbk5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsIG9uRXJyb3I/OiAoZXhjZXB0aW9uOiBhbnkpID0+IHZvaWQsIG9uQ29tcGxldGVkPzogKCkgPT4gdm9pZCk6IE9ic2VydmVyPFQ+O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU3VwcG9ydHMgcHVzaC1zdHlsZSBpdGVyYXRpb24gb3ZlciBhbiBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICAgICovXG4gICAgZXhwb3J0IHZhciBPYnNlcnZlcjogT2JzZXJ2ZXJTdGF0aWM7XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBpb2JzZXJ2ZXI6IFJ4LklPYnNlcnZlcjxib29sZWFuPjtcbiAgICB2YXIgb2JzZXJ2ZXI6IFJ4Lk9ic2VydmVyPGJvb2xlYW4+O1xuXG4gICAgaW9ic2VydmVyLm9uTmV4dChmYWxzZSk7XG4gICAgaW9ic2VydmVyLm9uRXJyb3IobmV3IEVycm9yKCdhJykpO1xuICAgIGlvYnNlcnZlci5vbkNvbXBsZXRlZCgpO1xuXG4gICAgb2JzZXJ2ZXIub25OZXh0KGZhbHNlKTtcbiAgICBvYnNlcnZlci5vbkVycm9yKG5ldyBFcnJvcignYScpKTtcbiAgICBvYnNlcnZlci5vbkNvbXBsZXRlZCgpO1xuXG4gICAgdmFyIHNvOiBSeC5PYnNlcnZlcjxudW1iZXI+ID0gUnguT2JzZXJ2ZXIuY3JlYXRlKCh2KSA9PiAxKTtcbiAgICBzbyA9IFJ4Lk9ic2VydmVyLmNyZWF0ZSgodikgPT4gMSwgKGUpID0+IHsgfSk7XG4gICAgc28gPSBSeC5PYnNlcnZlci5jcmVhdGUoKHYpID0+IDEsIChlKSA9PiB7IH0sICgpID0+IHsgfSk7XG59KTtcbiJdfQ==