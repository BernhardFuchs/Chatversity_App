"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("../common/events");
Zone.__load_patch('EventEmitter', function (global) {
    // For EventEmitter
    var EE_ADD_LISTENER = 'addListener';
    var EE_PREPEND_LISTENER = 'prependListener';
    var EE_REMOVE_LISTENER = 'removeListener';
    var EE_REMOVE_ALL_LISTENER = 'removeAllListeners';
    var EE_LISTENERS = 'listeners';
    var EE_ON = 'on';
    var compareTaskCallbackVsDelegate = function (task, delegate) {
        // same callback, same capture, same event name, just return
        return task.callback === delegate || task.callback.listener === delegate;
    };
    var eventNameToString = function (eventName) {
        if (typeof eventName === 'string') {
            return eventName;
        }
        if (!eventName) {
            return '';
        }
        return eventName.toString().replace('(', '_').replace(')', '_');
    };
    function patchEventEmitterMethods(obj) {
        var result = events_1.patchEventTarget(global, [obj], {
            useG: false,
            add: EE_ADD_LISTENER,
            rm: EE_REMOVE_LISTENER,
            prepend: EE_PREPEND_LISTENER,
            rmAll: EE_REMOVE_ALL_LISTENER,
            listeners: EE_LISTENERS,
            chkDup: false,
            rt: true,
            diff: compareTaskCallbackVsDelegate,
            eventNameToString: eventNameToString
        });
        if (result && result[0]) {
            obj[EE_ON] = obj[EE_ADD_LISTENER];
        }
    }
    // EventEmitter
    var events;
    try {
        events = require('events');
    }
    catch (err) {
    }
    if (events && events.EventEmitter) {
        patchEventEmitterMethods(events.EventEmitter.prototype);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm1zL2lvcy9idWlsZC9EZWJ1Zy1pcGhvbmVzaW11bGF0b3IvQ2hhdHZlcnNpdHlBcHAuYXBwL2FwcC90bnNfbW9kdWxlcy96b25lLmpzL2xpYi9ub2RlL2V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILDJDQUFrRDtBQUVsRCxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxVQUFDLE1BQVc7SUFDNUMsbUJBQW1CO0lBQ25CLElBQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQztJQUN0QyxJQUFNLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDO0lBQzlDLElBQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUM7SUFDNUMsSUFBTSxzQkFBc0IsR0FBRyxvQkFBb0IsQ0FBQztJQUNwRCxJQUFNLFlBQVksR0FBRyxXQUFXLENBQUM7SUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBRW5CLElBQU0sNkJBQTZCLEdBQUcsVUFBUyxJQUFTLEVBQUUsUUFBYTtRQUNyRSw0REFBNEQ7UUFDNUQsT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7SUFDM0UsQ0FBQyxDQUFDO0lBRUYsSUFBTSxpQkFBaUIsR0FBRyxVQUFTLFNBQXdCO1FBQ3pELElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE9BQU8sU0FBbUIsQ0FBQztTQUM1QjtRQUNELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQztJQUVGLFNBQVMsd0JBQXdCLENBQUMsR0FBUTtRQUN4QyxJQUFNLE1BQU0sR0FBRyx5QkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QyxJQUFJLEVBQUUsS0FBSztZQUNYLEdBQUcsRUFBRSxlQUFlO1lBQ3BCLEVBQUUsRUFBRSxrQkFBa0I7WUFDdEIsT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixLQUFLLEVBQUUsc0JBQXNCO1lBQzdCLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLE1BQU0sRUFBRSxLQUFLO1lBQ2IsRUFBRSxFQUFFLElBQUk7WUFDUixJQUFJLEVBQUUsNkJBQTZCO1lBQ25DLGlCQUFpQixFQUFFLGlCQUFpQjtTQUNyQyxDQUFDLENBQUM7UUFDSCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFRCxlQUFlO0lBQ2YsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJO1FBQ0YsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUM1QjtJQUFDLE9BQU8sR0FBRyxFQUFFO0tBQ2I7SUFFRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ2pDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDekQ7QUFDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtwYXRjaEV2ZW50VGFyZ2V0fSBmcm9tICcuLi9jb21tb24vZXZlbnRzJztcblxuWm9uZS5fX2xvYWRfcGF0Y2goJ0V2ZW50RW1pdHRlcicsIChnbG9iYWw6IGFueSkgPT4ge1xuICAvLyBGb3IgRXZlbnRFbWl0dGVyXG4gIGNvbnN0IEVFX0FERF9MSVNURU5FUiA9ICdhZGRMaXN0ZW5lcic7XG4gIGNvbnN0IEVFX1BSRVBFTkRfTElTVEVORVIgPSAncHJlcGVuZExpc3RlbmVyJztcbiAgY29uc3QgRUVfUkVNT1ZFX0xJU1RFTkVSID0gJ3JlbW92ZUxpc3RlbmVyJztcbiAgY29uc3QgRUVfUkVNT1ZFX0FMTF9MSVNURU5FUiA9ICdyZW1vdmVBbGxMaXN0ZW5lcnMnO1xuICBjb25zdCBFRV9MSVNURU5FUlMgPSAnbGlzdGVuZXJzJztcbiAgY29uc3QgRUVfT04gPSAnb24nO1xuXG4gIGNvbnN0IGNvbXBhcmVUYXNrQ2FsbGJhY2tWc0RlbGVnYXRlID0gZnVuY3Rpb24odGFzazogYW55LCBkZWxlZ2F0ZTogYW55KSB7XG4gICAgLy8gc2FtZSBjYWxsYmFjaywgc2FtZSBjYXB0dXJlLCBzYW1lIGV2ZW50IG5hbWUsIGp1c3QgcmV0dXJuXG4gICAgcmV0dXJuIHRhc2suY2FsbGJhY2sgPT09IGRlbGVnYXRlIHx8IHRhc2suY2FsbGJhY2subGlzdGVuZXIgPT09IGRlbGVnYXRlO1xuICB9O1xuXG4gIGNvbnN0IGV2ZW50TmFtZVRvU3RyaW5nID0gZnVuY3Rpb24oZXZlbnROYW1lOiBzdHJpbmd8U3ltYm9sKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZXZlbnROYW1lIGFzIHN0cmluZztcbiAgICB9XG4gICAgaWYgKCFldmVudE5hbWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50TmFtZS50b1N0cmluZygpLnJlcGxhY2UoJygnLCAnXycpLnJlcGxhY2UoJyknLCAnXycpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhdGNoRXZlbnRFbWl0dGVyTWV0aG9kcyhvYmo6IGFueSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHBhdGNoRXZlbnRUYXJnZXQoZ2xvYmFsLCBbb2JqXSwge1xuICAgICAgdXNlRzogZmFsc2UsXG4gICAgICBhZGQ6IEVFX0FERF9MSVNURU5FUixcbiAgICAgIHJtOiBFRV9SRU1PVkVfTElTVEVORVIsXG4gICAgICBwcmVwZW5kOiBFRV9QUkVQRU5EX0xJU1RFTkVSLFxuICAgICAgcm1BbGw6IEVFX1JFTU9WRV9BTExfTElTVEVORVIsXG4gICAgICBsaXN0ZW5lcnM6IEVFX0xJU1RFTkVSUyxcbiAgICAgIGNoa0R1cDogZmFsc2UsXG4gICAgICBydDogdHJ1ZSxcbiAgICAgIGRpZmY6IGNvbXBhcmVUYXNrQ2FsbGJhY2tWc0RlbGVnYXRlLFxuICAgICAgZXZlbnROYW1lVG9TdHJpbmc6IGV2ZW50TmFtZVRvU3RyaW5nXG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHRbMF0pIHtcbiAgICAgIG9ialtFRV9PTl0gPSBvYmpbRUVfQUREX0xJU1RFTkVSXTtcbiAgICB9XG4gIH1cblxuICAvLyBFdmVudEVtaXR0ZXJcbiAgbGV0IGV2ZW50cztcbiAgdHJ5IHtcbiAgICBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gIH1cblxuICBpZiAoZXZlbnRzICYmIGV2ZW50cy5FdmVudEVtaXR0ZXIpIHtcbiAgICBwYXRjaEV2ZW50RW1pdHRlck1ldGhvZHMoZXZlbnRzLkV2ZW50RW1pdHRlci5wcm90b3R5cGUpO1xuICB9XG59KTtcbiJdfQ==